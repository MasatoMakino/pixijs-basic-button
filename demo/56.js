"use strict";(self.webpackChunk_masatomakino_pixijs_basic_button=self.webpackChunk_masatomakino_pixijs_basic_button||[]).push([[56],{3552:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   O: () => (/* binding */ textureBitGl),\n/* harmony export */   Q: () => (/* binding */ textureBit)\n/* harmony export */ });\n\nconst textureBit = {\n  name: "texture-bit",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: "texture-bit",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=textureBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU1Mi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLWJ1dHRvbi8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvdGV4dHVyZUJpdC5tanM/YjFkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRleHR1cmVCaXQgPSB7XG4gIG5hbWU6IFwidGV4dHVyZS1iaXRcIixcbiAgZnJhZ21lbnQ6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygwKSB2YXIgdVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygxKSB2YXIgdVNhbXBsZXI6IHNhbXBsZXI7XG5cbiAgICAgICAgIFxuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBvdXRDb2xvciA9IHRleHR1cmVTYW1wbGUodVRleHR1cmUsIHVTYW1wbGVyLCB2VVYpO1xuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuY29uc3QgdGV4dHVyZUJpdEdsID0ge1xuICBuYW1lOiBcInRleHR1cmUtYml0XCIsXG4gIGZyYWdtZW50OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xuXG4gICAgICAgICBcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgb3V0Q29sb3IgPSB0ZXh0dXJlKHVUZXh0dXJlLCB2VVYpO1xuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyB0ZXh0dXJlQml0LCB0ZXh0dXJlQml0R2wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHR1cmVCaXQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3552\n')},7408:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G: () => (/* binding */ ensureAttributes)\n/* harmony export */ });\n/* harmony import */ var _utils_logging_warn_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8796);\n/* harmony import */ var _shared_geometry_utils_getAttributeInfoFromFormat_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8348);\n\n\n\n"use strict";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.location ?? (attribute.location = attributeData.location);\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      (0,_utils_logging_warn_mjs__WEBPACK_IMPORTED_MODULE_0__/* .warn */ .m)(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += (0,_shared_geometry_utils_getAttributeInfoFromFormat_mjs__WEBPACK_IMPORTED_MODULE_1__/* .getAttributeInfoFromFormat */ .I)(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += (0,_shared_geometry_utils_getAttributeInfoFromFormat_mjs__WEBPACK_IMPORTED_MODULE_1__/* .getAttributeInfoFromFormat */ .I)(attribute.format).stride;\n  }\n}\n\n\n//# sourceMappingURL=ensureAttributes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQwOC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2RDtBQUM4Qzs7QUFFM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTSxzRUFBSSxjQUFjLEdBQUc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0JBQXNCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywwSEFBMEI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywwSEFBMEI7QUFDakU7QUFDQTs7QUFFNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1idXR0b24vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9lbnN1cmVBdHRyaWJ1dGVzLm1qcz9hNjliIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcbmltcG9ydCB7IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2dlb21ldHJ5L3V0aWxzL2dldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZW5zdXJlQXR0cmlidXRlcyhnZW9tZXRyeSwgZXh0cmFjdGVkRGF0YSkge1xuICBmb3IgKGNvbnN0IGkgaW4gZ2VvbWV0cnkuYXR0cmlidXRlcykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbaV07XG4gICAgY29uc3QgYXR0cmlidXRlRGF0YSA9IGV4dHJhY3RlZERhdGFbaV07XG4gICAgaWYgKGF0dHJpYnV0ZURhdGEpIHtcbiAgICAgIGF0dHJpYnV0ZS5sb2NhdGlvbiA/PyAoYXR0cmlidXRlLmxvY2F0aW9uID0gYXR0cmlidXRlRGF0YS5sb2NhdGlvbik7XG4gICAgICBhdHRyaWJ1dGUuZm9ybWF0ID8/IChhdHRyaWJ1dGUuZm9ybWF0ID0gYXR0cmlidXRlRGF0YS5mb3JtYXQpO1xuICAgICAgYXR0cmlidXRlLm9mZnNldCA/PyAoYXR0cmlidXRlLm9mZnNldCA9IGF0dHJpYnV0ZURhdGEub2Zmc2V0KTtcbiAgICAgIGF0dHJpYnV0ZS5pbnN0YW5jZSA/PyAoYXR0cmlidXRlLmluc3RhbmNlID0gYXR0cmlidXRlRGF0YS5pbnN0YW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oYEF0dHJpYnV0ZSAke2l9IGlzIG5vdCBwcmVzZW50IGluIHRoZSBzaGFkZXIsIGJ1dCBpcyBwcmVzZW50IGluIHRoZSBnZW9tZXRyeS4gVW5hYmxlIHRvIGluZmVyIGF0dHJpYnV0ZSBkZXRhaWxzLmApO1xuICAgIH1cbiAgfVxuICBlbnN1cmVTdGFydEFuZFN0cmlkZShnZW9tZXRyeSk7XG59XG5mdW5jdGlvbiBlbnN1cmVTdGFydEFuZFN0cmlkZShnZW9tZXRyeSkge1xuICBjb25zdCB7IGJ1ZmZlcnMsIGF0dHJpYnV0ZXMgfSA9IGdlb21ldHJ5O1xuICBjb25zdCB0ZW1wU3RyaWRlID0ge307XG4gIGNvbnN0IHRlbXBTdGFydCA9IHt9O1xuICBmb3IgKGNvbnN0IGogaW4gYnVmZmVycykge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGJ1ZmZlcnNbal07XG4gICAgdGVtcFN0cmlkZVtidWZmZXIudWlkXSA9IDA7XG4gICAgdGVtcFN0YXJ0W2J1ZmZlci51aWRdID0gMDtcbiAgfVxuICBmb3IgKGNvbnN0IGogaW4gYXR0cmlidXRlcykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbal07XG4gICAgdGVtcFN0cmlkZVthdHRyaWJ1dGUuYnVmZmVyLnVpZF0gKz0gZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQoYXR0cmlidXRlLmZvcm1hdCkuc3RyaWRlO1xuICB9XG4gIGZvciAoY29uc3QgaiBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tqXTtcbiAgICBhdHRyaWJ1dGUuc3RyaWRlID8/IChhdHRyaWJ1dGUuc3RyaWRlID0gdGVtcFN0cmlkZVthdHRyaWJ1dGUuYnVmZmVyLnVpZF0pO1xuICAgIGF0dHJpYnV0ZS5zdGFydCA/PyAoYXR0cmlidXRlLnN0YXJ0ID0gdGVtcFN0YXJ0W2F0dHJpYnV0ZS5idWZmZXIudWlkXSk7XG4gICAgdGVtcFN0YXJ0W2F0dHJpYnV0ZS5idWZmZXIudWlkXSArPSBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdChhdHRyaWJ1dGUuZm9ybWF0KS5zdHJpZGU7XG4gIH1cbn1cblxuZXhwb3J0IHsgZW5zdXJlQXR0cmlidXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5zdXJlQXR0cmlidXRlcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7408\n')},4120:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   W: () => (/* binding */ GpuStencilModesToPixi)\n/* harmony export */ });\n/* harmony import */ var _shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6204);\n\n\n"use strict";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .k.NONE] = void 0;\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .k.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .k.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: "always",\n    passOp: "increment-clamp"\n  },\n  stencilBack: {\n    compare: "always",\n    passOp: "increment-clamp"\n  }\n};\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .k.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: "always",\n    passOp: "decrement-clamp"\n  },\n  stencilBack: {\n    compare: "always",\n    passOp: "decrement-clamp"\n  }\n};\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .k.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: "equal",\n    passOp: "keep"\n  },\n  stencilBack: {\n    compare: "equal",\n    passOp: "keep"\n  }\n};\n\n\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEyMC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQTZEOztBQUU3RDtBQUNBO0FBQ0Esc0JBQXNCLDJFQUFhO0FBQ25DLHNCQUFzQiwyRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkVBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkVBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkVBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1idXR0b24vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc3RhdGUvR3B1U3RlbmNpbE1vZGVzVG9QaXhpLm1qcz8wMWI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNURU5DSUxfTU9ERVMgfSBmcm9tICcuLi8uLi9zaGFyZWQvc3RhdGUvY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBHcHVTdGVuY2lsTW9kZXNUb1BpeGkgPSBbXTtcbkdwdVN0ZW5jaWxNb2Rlc1RvUGl4aVtTVEVOQ0lMX01PREVTLk5PTkVdID0gdm9pZCAwO1xuR3B1U3RlbmNpbE1vZGVzVG9QaXhpW1NURU5DSUxfTU9ERVMuRElTQUJMRURdID0ge1xuICBzdGVuY2lsV3JpdGVNYXNrOiAwLFxuICBzdGVuY2lsUmVhZE1hc2s6IDBcbn07XG5HcHVTdGVuY2lsTW9kZXNUb1BpeGlbU1RFTkNJTF9NT0RFUy5SRU5ERVJJTkdfTUFTS19BRERdID0ge1xuICBzdGVuY2lsRnJvbnQ6IHtcbiAgICBjb21wYXJlOiBcImFsd2F5c1wiLFxuICAgIHBhc3NPcDogXCJpbmNyZW1lbnQtY2xhbXBcIlxuICB9LFxuICBzdGVuY2lsQmFjazoge1xuICAgIGNvbXBhcmU6IFwiYWx3YXlzXCIsXG4gICAgcGFzc09wOiBcImluY3JlbWVudC1jbGFtcFwiXG4gIH1cbn07XG5HcHVTdGVuY2lsTW9kZXNUb1BpeGlbU1RFTkNJTF9NT0RFUy5SRU5ERVJJTkdfTUFTS19SRU1PVkVdID0ge1xuICBzdGVuY2lsRnJvbnQ6IHtcbiAgICBjb21wYXJlOiBcImFsd2F5c1wiLFxuICAgIHBhc3NPcDogXCJkZWNyZW1lbnQtY2xhbXBcIlxuICB9LFxuICBzdGVuY2lsQmFjazoge1xuICAgIGNvbXBhcmU6IFwiYWx3YXlzXCIsXG4gICAgcGFzc09wOiBcImRlY3JlbWVudC1jbGFtcFwiXG4gIH1cbn07XG5HcHVTdGVuY2lsTW9kZXNUb1BpeGlbU1RFTkNJTF9NT0RFUy5NQVNLX0FDVElWRV0gPSB7XG4gIHN0ZW5jaWxXcml0ZU1hc2s6IDAsXG4gIHN0ZW5jaWxGcm9udDoge1xuICAgIGNvbXBhcmU6IFwiZXF1YWxcIixcbiAgICBwYXNzT3A6IFwia2VlcFwiXG4gIH0sXG4gIHN0ZW5jaWxCYWNrOiB7XG4gICAgY29tcGFyZTogXCJlcXVhbFwiLFxuICAgIHBhc3NPcDogXCJrZWVwXCJcbiAgfVxufTtcblxuZXhwb3J0IHsgR3B1U3RlbmNpbE1vZGVzVG9QaXhpIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcHVTdGVuY2lsTW9kZXNUb1BpeGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4120\n')},8976:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   I: () => (/* binding */ BufferResource)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8440);\n/* harmony import */ var _utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8532);\n\n\n\n"use strict";\nclass BufferResource extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .c {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * a unique id for this uniform group used through the renderer\n     * @internal\n     * @ignore\n     */\n    this.uid = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__/* .uid */ .c)("buffer");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = "bufferResource";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__/* .uid */ .c)("resource");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on("change", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__/* .uid */ .c)("resource");\n    this.emit("change", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.buffer = null;\n  }\n}\n\n\n//# sourceMappingURL=BufferResource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODk3Ni5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNZOztBQUVyRDtBQUNBLDZCQUE2Qiw4REFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0JBQXNCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFHO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUVBQUc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlFQUFHO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtYnV0dG9uLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2J1ZmZlci9CdWZmZXJSZXNvdXJjZS5tanM/OGFkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0IHsgdWlkIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvZGF0YS91aWQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBCdWZmZXJSZXNvdXJjZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgQnVmZmVyIFJlc291cmNlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgYnVmZmVyIHJlc291cmNlXG4gICAqIEBwYXJhbSBvcHRpb25zLmJ1ZmZlciAtIFRoZSB1bmRlcmx5aW5nIGJ1ZmZlciB0aGF0IHRoaXMgcmVzb3VyY2UgaXMgdXNpbmdcbiAgICogQHBhcmFtIG9wdGlvbnMub2Zmc2V0IC0gVGhlIG9mZnNldCBvZiB0aGUgYnVmZmVyIHRoaXMgcmVzb3VyY2UgaXMgdXNpbmcuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgdGhlbiBpdCB3aWxsIHVzZSB0aGUgb2Zmc2V0IG9mIHRoZSBidWZmZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zLnNpemUgLSBUaGUgc2l6ZSBvZiB0aGUgYnVmZmVyIHRoaXMgcmVzb3VyY2UgaXMgdXNpbmcuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgdGhlbiBpdCB3aWxsIHVzZSB0aGUgc2l6ZSBvZiB0aGUgYnVmZmVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBidWZmZXIsIG9mZnNldCwgc2l6ZSB9KSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBlbWl0cyB3aGVuIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlciBoYXMgY2hhbmdlZCBzaGFwZSAoaS5lLiByZXNpemVkKVxuICAgICAqIGxldHRpbmcgdGhlIHJlbmRlcmVyIGtub3cgdGhhdCBpdCBuZWVkcyB0byBkaXNjYXJkIHRoZSBvbGQgYnVmZmVyIG9uIHRoZSBHUFUgYW5kIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgKiBAZXZlbnQgY2hhbmdlXG4gICAgICovXG4gICAgLyoqXG4gICAgICogYSB1bmlxdWUgaWQgZm9yIHRoaXMgdW5pZm9ybSBncm91cCB1c2VkIHRocm91Z2ggdGhlIHJlbmRlcmVyXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMudWlkID0gdWlkKFwiYnVmZmVyXCIpO1xuICAgIC8qKlxuICAgICAqIGEgcmVzb3VyY2UgdHlwZSwgdXNlZCB0byBpZGVudGlmeSBob3cgdG8gaGFuZGxlIGl0IHdoZW4gaXRzIGluIGEgYmluZCBncm91cCAvIHNoYWRlciByZXNvdXJjZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB0aGlzLl9yZXNvdXJjZVR5cGUgPSBcImJ1ZmZlclJlc291cmNlXCI7XG4gICAgLyoqXG4gICAgICogdXNlZCBpbnRlcm5hbGx5IHRvIGtub3cgaWYgYSB1bmlmb3JtIGdyb3VwIHdhcyB1c2VkIGluIHRoZSBsYXN0IHJlbmRlciBwYXNzXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMuX3RvdWNoZWQgPSAwO1xuICAgIC8qKlxuICAgICAqIHRoZSByZXNvdXJjZSBpZCB1c2VkIGludGVybmFsbHkgYnkgdGhlIHJlbmRlcmVyIHRvIGJ1aWxkIGJpbmQgZ3JvdXAga2V5c1xuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB0aGlzLl9yZXNvdXJjZUlkID0gdWlkKFwicmVzb3VyY2VcIik7XG4gICAgLyoqXG4gICAgICogQSBjaGVla3kgaGludCB0byB0aGUgR0wgcmVuZGVyZXIgdG8gbGV0IGl0IGtub3cgdGhpcyBpcyBhIEJ1ZmZlclJlc291cmNlXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMuX2J1ZmZlclJlc291cmNlID0gdHJ1ZTtcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldCB8IDA7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLmJ1ZmZlci5vbihcImNoYW5nZVwiLCB0aGlzLm9uQnVmZmVyQ2hhbmdlLCB0aGlzKTtcbiAgfVxuICBvbkJ1ZmZlckNoYW5nZSgpIHtcbiAgICB0aGlzLl9yZXNvdXJjZUlkID0gdWlkKFwicmVzb3VyY2VcIik7XG4gICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIsIHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGlzIHJlc291cmNlLiBNYWtlIHN1cmUgdGhlIHVuZGVybHlpbmcgYnVmZmVyIGlzIG5vdCB1c2VkIGFueXdoZXJlIGVsc2VcbiAgICogaWYgeW91IHdhbnQgdG8gZGVzdHJveSBpdCBhcyB3ZWxsLCBvciBjb2RlIHdpbGwgZXhwbG9kZVxuICAgKiBAcGFyYW0gZGVzdHJveUJ1ZmZlciAtIFNob3VsZCB0aGUgdW5kZXJseWluZyBidWZmZXIgYmUgZGVzdHJveWVkIGFzIHdlbGw/XG4gICAqL1xuICBkZXN0cm95KGRlc3Ryb3lCdWZmZXIgPSBmYWxzZSkge1xuICAgIGlmIChkZXN0cm95QnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgeyBCdWZmZXJSZXNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnVmZmVyUmVzb3VyY2UubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8976\n')},4876:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   K: () => (/* binding */ RenderTarget)\n/* harmony export */ });\n/* harmony import */ var _utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8532);\n/* harmony import */ var _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5904);\n/* harmony import */ var _texture_Texture_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8518);\n\n\n\n\n"use strict";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    this.uid = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uid */ .c)("renderTarget");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === "number") {\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .TextureSource */ .S({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on("resize", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof _texture_Texture_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Texture */ .w || descriptor.depthStencilTexture instanceof _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .TextureSource */ .S) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .TextureSource */ .S({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: "depth24plus-stencil8",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off("resize", this.onSourceResize, this);\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\n\n//# sourceMappingURL=RenderTarget.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg3Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDZ0I7QUFDcEI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsZUFBZSxpRUFBRztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhCQUE4QjtBQUNwRDtBQUNBLGNBQWMsc0ZBQWE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0VBQU8sOENBQThDLHNGQUFhO0FBQ3RIO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxzRkFBYTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLWJ1dHRvbi8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9yZW5kZXJUYXJnZXQvUmVuZGVyVGFyZ2V0Lm1qcz80MzQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVpZCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2RhdGEvdWlkLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlU291cmNlIH0gZnJvbSAnLi4vdGV4dHVyZS9zb3VyY2VzL1RleHR1cmVTb3VyY2UubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlL1RleHR1cmUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfUmVuZGVyVGFyZ2V0ID0gY2xhc3MgX1JlbmRlclRhcmdldCB7XG4gIC8qKlxuICAgKiBAcGFyYW0gW2Rlc2NyaXB0b3JdIC0gT3B0aW9ucyBmb3IgY3JlYXRpbmcgYSByZW5kZXIgdGFyZ2V0LlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGVzY3JpcHRvciA9IHt9KSB7XG4gICAgdGhpcy51aWQgPSB1aWQoXCJyZW5kZXJUYXJnZXRcIik7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgdGV4dHVyZXMgdGhhdCBjYW4gYmUgd3JpdHRlbiB0byBieSB0aGUgR1BVIC0gbW9zdGx5IHRoaXMgaGFzIG9uZSB0ZXh0dXJlIGluIFBpeGksIGJ1dCB5b3UgY291bGRcbiAgICAgKiB3cml0ZSB0byBtdWx0aXBsZSBpZiByZXF1aXJlZCEgKGVnIGRlZmVycmVkIGxpZ2h0aW5nKVxuICAgICAqL1xuICAgIHRoaXMuY29sb3JUZXh0dXJlcyA9IFtdO1xuICAgIHRoaXMuZGlydHlJZCA9IDA7XG4gICAgdGhpcy5pc1Jvb3QgPSBmYWxzZTtcbiAgICB0aGlzLl9zaXplID0gbmV3IEZsb2F0MzJBcnJheSgyKTtcbiAgICBkZXNjcmlwdG9yID0geyAuLi5fUmVuZGVyVGFyZ2V0LmRlZmF1bHRPcHRpb25zLCAuLi5kZXNjcmlwdG9yIH07XG4gICAgdGhpcy5zdGVuY2lsID0gZGVzY3JpcHRvci5zdGVuY2lsO1xuICAgIHRoaXMuZGVwdGggPSBkZXNjcmlwdG9yLmRlcHRoO1xuICAgIHRoaXMuaXNSb290ID0gZGVzY3JpcHRvci5pc1Jvb3Q7XG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmNvbG9yVGV4dHVyZXMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVzY3JpcHRvci5jb2xvclRleHR1cmVzOyBpKyspIHtcbiAgICAgICAgdGhpcy5jb2xvclRleHR1cmVzLnB1c2goXG4gICAgICAgICAgbmV3IFRleHR1cmVTb3VyY2Uoe1xuICAgICAgICAgICAgd2lkdGg6IGRlc2NyaXB0b3Iud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGRlc2NyaXB0b3IuaGVpZ2h0LFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogZGVzY3JpcHRvci5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgYW50aWFsaWFzOiBkZXNjcmlwdG9yLmFudGlhbGlhc1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sb3JUZXh0dXJlcyA9IFsuLi5kZXNjcmlwdG9yLmNvbG9yVGV4dHVyZXMubWFwKCh0ZXh0dXJlKSA9PiB0ZXh0dXJlLnNvdXJjZSldO1xuICAgICAgY29uc3QgY29sb3JTb3VyY2UgPSB0aGlzLmNvbG9yVGV4dHVyZS5zb3VyY2U7XG4gICAgICB0aGlzLnJlc2l6ZShjb2xvclNvdXJjZS53aWR0aCwgY29sb3JTb3VyY2UuaGVpZ2h0LCBjb2xvclNvdXJjZS5fcmVzb2x1dGlvbik7XG4gICAgfVxuICAgIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5vbihcInJlc2l6ZVwiLCB0aGlzLm9uU291cmNlUmVzaXplLCB0aGlzKTtcbiAgICBpZiAoZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxUZXh0dXJlIHx8IHRoaXMuc3RlbmNpbCkge1xuICAgICAgaWYgKGRlc2NyaXB0b3IuZGVwdGhTdGVuY2lsVGV4dHVyZSBpbnN0YW5jZW9mIFRleHR1cmUgfHwgZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxUZXh0dXJlIGluc3RhbmNlb2YgVGV4dHVyZVNvdXJjZSkge1xuICAgICAgICB0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmUgPSBkZXNjcmlwdG9yLmRlcHRoU3RlbmNpbFRleHR1cmUuc291cmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbnN1cmVEZXB0aFN0ZW5jaWxUZXh0dXJlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBzaXplKCkge1xuICAgIGNvbnN0IF9zaXplID0gdGhpcy5fc2l6ZTtcbiAgICBfc2l6ZVswXSA9IHRoaXMucGl4ZWxXaWR0aDtcbiAgICBfc2l6ZVsxXSA9IHRoaXMucGl4ZWxIZWlnaHQ7XG4gICAgcmV0dXJuIF9zaXplO1xuICB9XG4gIGdldCB3aWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xvclRleHR1cmUuc291cmNlLndpZHRoO1xuICB9XG4gIGdldCBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5oZWlnaHQ7XG4gIH1cbiAgZ2V0IHBpeGVsV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5waXhlbFdpZHRoO1xuICB9XG4gIGdldCBwaXhlbEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xvclRleHR1cmUuc291cmNlLnBpeGVsSGVpZ2h0O1xuICB9XG4gIGdldCByZXNvbHV0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbG9yVGV4dHVyZS5zb3VyY2UuX3Jlc29sdXRpb247XG4gIH1cbiAgZ2V0IGNvbG9yVGV4dHVyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xvclRleHR1cmVzWzBdO1xuICB9XG4gIG9uU291cmNlUmVzaXplKHNvdXJjZSkge1xuICAgIHRoaXMucmVzaXplKHNvdXJjZS53aWR0aCwgc291cmNlLmhlaWdodCwgc291cmNlLl9yZXNvbHV0aW9uLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyB3aWxsIGVuc3VyZSBhIGRlcHRoU3RlbmNpbCB0ZXh0dXJlIGlzIGNyZWF0ZWQgZm9yIHRoaXMgcmVuZGVyIHRhcmdldC5cbiAgICogTW9zdCBsaWtlbHkgY2FsbGVkIGJ5IHRoZSBtYXNrIHN5c3RlbSB0byBtYWtlIHN1cmUgd2UgaGF2ZSBzdGVuY2lsIGJ1ZmZlciBhZGRlZC5cbiAgICogQGludGVybmFsXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGVuc3VyZURlcHRoU3RlbmNpbFRleHR1cmUoKSB7XG4gICAgaWYgKCF0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmUpIHtcbiAgICAgIHRoaXMuZGVwdGhTdGVuY2lsVGV4dHVyZSA9IG5ldyBUZXh0dXJlU291cmNlKHtcbiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgIHJlc29sdXRpb246IHRoaXMucmVzb2x1dGlvbixcbiAgICAgICAgZm9ybWF0OiBcImRlcHRoMjRwbHVzLXN0ZW5jaWw4XCIsXG4gICAgICAgIGF1dG9HZW5lcmF0ZU1pcG1hcHM6IGZhbHNlLFxuICAgICAgICBhbnRpYWxpYXM6IGZhbHNlLFxuICAgICAgICBtaXBMZXZlbENvdW50OiAxXG4gICAgICAgIC8vIHNhbXBsZUNvdW50OiBoYW5kbGVkIGJ5IHRoZSByZW5kZXIgdGFyZ2V0IHN5c3RlbS4uXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmVzaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24gPSB0aGlzLnJlc29sdXRpb24sIHNraXBDb2xvclRleHR1cmUgPSBmYWxzZSkge1xuICAgIHRoaXMuZGlydHlJZCsrO1xuICAgIHRoaXMuY29sb3JUZXh0dXJlcy5mb3JFYWNoKChjb2xvclRleHR1cmUsIGkpID0+IHtcbiAgICAgIGlmIChza2lwQ29sb3JUZXh0dXJlICYmIGkgPT09IDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbG9yVGV4dHVyZS5zb3VyY2UucmVzaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24pO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmUpIHtcbiAgICAgIHRoaXMuZGVwdGhTdGVuY2lsVGV4dHVyZS5zb3VyY2UucmVzaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24pO1xuICAgIH1cbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5vZmYoXCJyZXNpemVcIiwgdGhpcy5vblNvdXJjZVJlc2l6ZSwgdGhpcyk7XG4gICAgaWYgKHRoaXMuZGVwdGhTdGVuY2lsVGV4dHVyZSkge1xuICAgICAgdGhpcy5kZXB0aFN0ZW5jaWxUZXh0dXJlLmRlc3Ryb3koKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmU7XG4gICAgfVxuICB9XG59O1xuLyoqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIGEgcmVuZGVyIHRhcmdldCAqL1xuX1JlbmRlclRhcmdldC5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgLyoqIHRoZSB3aWR0aCBvZiB0aGUgUmVuZGVyVGFyZ2V0ICovXG4gIHdpZHRoOiAwLFxuICAvKiogdGhlIGhlaWdodCBvZiB0aGUgUmVuZGVyVGFyZ2V0ICovXG4gIGhlaWdodDogMCxcbiAgLyoqIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBSZW5kZXJUYXJnZXQgKi9cbiAgcmVzb2x1dGlvbjogMSxcbiAgLyoqIGFuIGFycmF5IG9mIHRleHR1cmVzLCBvciBhIG51bWJlciBpbmRpY2F0aW5nIGhvdyBtYW55IGNvbG9yIHRleHR1cmVzIHRoZXJlIHNob3VsZCBiZSAqL1xuICBjb2xvclRleHR1cmVzOiAxLFxuICAvKiogc2hvdWxkIHRoaXMgcmVuZGVyIHRhcmdldCBoYXZlIGEgc3RlbmNpbCBidWZmZXI/ICovXG4gIHN0ZW5jaWw6IGZhbHNlLFxuICAvKiogc2hvdWxkIHRoaXMgcmVuZGVyIHRhcmdldCBoYXZlIGEgZGVwdGggYnVmZmVyPyAqL1xuICBkZXB0aDogZmFsc2UsXG4gIC8qKiBzaG91bGQgdGhpcyByZW5kZXIgdGFyZ2V0IGJlIGFudGlhbGlhc2VkPyAqL1xuICBhbnRpYWxpYXM6IGZhbHNlLFxuICAvLyBzYXZlIG9uIHBlcmYgYnkgZGVmYXVsdCFcbiAgLyoqIGlzIHRoaXMgYSByb290IGVsZW1lbnQsIHRydWUgaWYgdGhpcyBpcyBnbCBjb250ZXh0IG93bmVycyByZW5kZXIgdGFyZ2V0ICovXG4gIGlzUm9vdDogZmFsc2Vcbn07XG5sZXQgUmVuZGVyVGFyZ2V0ID0gX1JlbmRlclRhcmdldDtcblxuZXhwb3J0IHsgUmVuZGVyVGFyZ2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZW5kZXJUYXJnZXQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4876\n')},2312:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  C: () => (/* binding */ RenderTargetSystem)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/matrix/Matrix.mjs\nvar Matrix = __webpack_require__(328);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs\nvar Rectangle = __webpack_require__(5520);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs\nvar gl_const = __webpack_require__(1260);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs\n\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\n\n//# sourceMappingURL=calculateProjection.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/system/SystemRunner.mjs\nvar SystemRunner = __webpack_require__(6928);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs\nvar CanvasSource = __webpack_require__(1468);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs + 2 modules\nvar TextureSource = __webpack_require__(5904);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs + 2 modules\nvar Texture = __webpack_require__(8518);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs\nvar getCanvasTexture = __webpack_require__(9196);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs\n\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\n\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs\nvar RenderTarget = __webpack_require__(4876);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle/* Rectangle */.Y();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle/* Rectangle */.Y();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner/* SystemRunner */.G(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix/* Matrix */.W();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture/* Texture */.w) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = gl_const/* CLEAR */.U.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = gl_const/* CLEAR */.U.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource/* CanvasSource */.K.test(renderSurface)) {\n      renderSurface = (0,getCanvasTexture/* getCanvasTexture */.K)(renderSurface);\n    }\n    if (renderSurface instanceof RenderTarget/* RenderTarget */.K) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource/* TextureSource */.S) {\n      renderTarget = new RenderTarget/* RenderTarget */.K({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource/* CanvasSource */.K.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.on(\"destroy\", () => {\n        renderTarget.destroy();\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\n\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2312\n")},6004:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   M: () => (/* binding */ UboSystem)\n/* harmony export */ });\n/* harmony import */ var _utils_browser_unsafeEvalSupported_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6960);\n/* harmony import */ var _buffer_Buffer_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2592);\n/* harmony import */ var _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2864);\n\n\n\n\n"use strict";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don\'t have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overrideable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn\'t support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!(0,_utils_browser_unsafeEvalSupported_mjs__WEBPACK_IMPORTED_MODULE_0__/* .unsafeEvalSupported */ .S)()) {\n      throw new Error("Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new _buffer_Buffer_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Buffer */ .S({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .c.UNIFORM | _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .c.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new _buffer_Buffer_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Buffer */ .S({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .c.UNIFORM | _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .c.COPY_DST\n    }));\n    data || (data = uniformGroup.buffer.data);\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\n\n//# sourceMappingURL=UboSystem.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAwNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Y7QUFDMUM7QUFDSTs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsb0dBQW1CO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsK0RBQU07QUFDNUQ7QUFDQSxhQUFhLG1FQUFXLFdBQVcsbUVBQVc7QUFDOUMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsK0RBQU07QUFDNUQ7QUFDQSxhQUFhLG1FQUFXLFdBQVcsbUVBQVc7QUFDOUMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtYnV0dG9uLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9VYm9TeXN0ZW0ubWpzP2E5NDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5zYWZlRXZhbFN1cHBvcnRlZCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2Jyb3dzZXIvdW5zYWZlRXZhbFN1cHBvcnRlZC5tanMnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnLi4vYnVmZmVyL0J1ZmZlci5tanMnO1xuaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tICcuLi9idWZmZXIvY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBVYm9TeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihhZGFwdG9yKSB7XG4gICAgLyoqIENhY2hlIG9mIHVuaWZvcm0gYnVmZmVyIGxheW91dHMgYW5kIHN5bmMgZnVuY3Rpb25zLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHJlLWNyZWF0ZSB0aGVtICovXG4gICAgdGhpcy5fc3luY0Z1bmN0aW9uSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2FkYXB0b3IgPSBhZGFwdG9yO1xuICAgIHRoaXMuX3N5c3RlbUNoZWNrKCk7XG4gIH1cbiAgLyoqXG4gICAqIE92ZXJyaWRlYWJsZSBmdW5jdGlvbiBieSBgcGl4aS5qcy91bnNhZmUtZXZhbGAgdG8gc2lsZW5jZVxuICAgKiB0aHJvd2luZyBhbiBlcnJvciBpZiBwbGF0Zm9ybSBkb2Vzbid0IHN1cHBvcnQgdW5zYWZlLWV2YWxzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N5c3RlbUNoZWNrKCkge1xuICAgIGlmICghdW5zYWZlRXZhbFN1cHBvcnRlZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IGFsbG93IHVuc2FmZS1ldmFsLCBwbGVhc2UgdXNlIHBpeGkuanMvdW5zYWZlLWV2YWwgbW9kdWxlIHRvIGVuYWJsZSBzdXBwb3J0LlwiKTtcbiAgICB9XG4gIH1cbiAgZW5zdXJlVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCkge1xuICAgIGNvbnN0IHVuaWZvcm1EYXRhID0gdGhpcy5nZXRVbmlmb3JtR3JvdXBEYXRhKHVuaWZvcm1Hcm91cCk7XG4gICAgdW5pZm9ybUdyb3VwLmJ1ZmZlciB8fCAodW5pZm9ybUdyb3VwLmJ1ZmZlciA9IG5ldyBCdWZmZXIoe1xuICAgICAgZGF0YTogbmV3IEZsb2F0MzJBcnJheSh1bmlmb3JtRGF0YS5sYXlvdXQuc2l6ZSAvIDQpLFxuICAgICAgdXNhZ2U6IEJ1ZmZlclVzYWdlLlVOSUZPUk0gfCBCdWZmZXJVc2FnZS5DT1BZX0RTVFxuICAgIH0pKTtcbiAgfVxuICBnZXRVbmlmb3JtR3JvdXBEYXRhKHVuaWZvcm1Hcm91cCkge1xuICAgIHJldHVybiB0aGlzLl9zeW5jRnVuY3Rpb25IYXNoW3VuaWZvcm1Hcm91cC5fc2lnbmF0dXJlXSB8fCB0aGlzLl9pbml0VW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCk7XG4gIH1cbiAgX2luaXRVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwKSB7XG4gICAgY29uc3QgdW5pZm9ybUdyb3VwU2lnbmF0dXJlID0gdW5pZm9ybUdyb3VwLl9zaWduYXR1cmU7XG4gICAgbGV0IHVuaWZvcm1EYXRhID0gdGhpcy5fc3luY0Z1bmN0aW9uSGFzaFt1bmlmb3JtR3JvdXBTaWduYXR1cmVdO1xuICAgIGlmICghdW5pZm9ybURhdGEpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gT2JqZWN0LmtleXModW5pZm9ybUdyb3VwLnVuaWZvcm1TdHJ1Y3R1cmVzKS5tYXAoKGkpID0+IHVuaWZvcm1Hcm91cC51bmlmb3JtU3RydWN0dXJlc1tpXSk7XG4gICAgICBjb25zdCBsYXlvdXQgPSB0aGlzLl9hZGFwdG9yLmNyZWF0ZVVib0VsZW1lbnRzKGVsZW1lbnRzKTtcbiAgICAgIGNvbnN0IHN5bmNGdW5jdGlvbiA9IHRoaXMuX2dlbmVyYXRlVWJvU3luYyhsYXlvdXQudWJvRWxlbWVudHMpO1xuICAgICAgdW5pZm9ybURhdGEgPSB0aGlzLl9zeW5jRnVuY3Rpb25IYXNoW3VuaWZvcm1Hcm91cFNpZ25hdHVyZV0gPSB7XG4gICAgICAgIGxheW91dCxcbiAgICAgICAgc3luY0Z1bmN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc3luY0Z1bmN0aW9uSGFzaFt1bmlmb3JtR3JvdXBTaWduYXR1cmVdO1xuICB9XG4gIF9nZW5lcmF0ZVVib1N5bmModWJvRWxlbWVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRhcHRvci5nZW5lcmF0ZVVib1N5bmModWJvRWxlbWVudHMpO1xuICB9XG4gIHN5bmNVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwLCBkYXRhLCBvZmZzZXQpIHtcbiAgICBjb25zdCB1bmlmb3JtR3JvdXBEYXRhID0gdGhpcy5nZXRVbmlmb3JtR3JvdXBEYXRhKHVuaWZvcm1Hcm91cCk7XG4gICAgdW5pZm9ybUdyb3VwLmJ1ZmZlciB8fCAodW5pZm9ybUdyb3VwLmJ1ZmZlciA9IG5ldyBCdWZmZXIoe1xuICAgICAgZGF0YTogbmV3IEZsb2F0MzJBcnJheSh1bmlmb3JtR3JvdXBEYXRhLmxheW91dC5zaXplIC8gNCksXG4gICAgICB1c2FnZTogQnVmZmVyVXNhZ2UuVU5JRk9STSB8IEJ1ZmZlclVzYWdlLkNPUFlfRFNUXG4gICAgfSkpO1xuICAgIGRhdGEgfHwgKGRhdGEgPSB1bmlmb3JtR3JvdXAuYnVmZmVyLmRhdGEpO1xuICAgIG9mZnNldCB8fCAob2Zmc2V0ID0gMCk7XG4gICAgdW5pZm9ybUdyb3VwRGF0YS5zeW5jRnVuY3Rpb24odW5pZm9ybUdyb3VwLnVuaWZvcm1zLCBkYXRhLCBvZmZzZXQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHVwZGF0ZVVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXApIHtcbiAgICBpZiAodW5pZm9ybUdyb3VwLmlzU3RhdGljICYmICF1bmlmb3JtR3JvdXAuX2RpcnR5SWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdW5pZm9ybUdyb3VwLl9kaXJ0eUlkID0gMDtcbiAgICBjb25zdCBzeW5jZWQgPSB0aGlzLnN5bmNVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwKTtcbiAgICB1bmlmb3JtR3JvdXAuYnVmZmVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzeW5jZWQ7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9zeW5jRnVuY3Rpb25IYXNoID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgeyBVYm9TeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVib1N5c3RlbS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6004\n')},1888:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G: () => (/* binding */ createUboSyncFunction)\n/* harmony export */ });\n/* harmony import */ var _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8379);\n\n\n"use strict";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .O.length; j++) {\n      const uniformParser = _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .O[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = "${name}";`,\n          `offset += ${offset - prev};`,\n          _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .O[j][parserCode] || _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .O[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join("\\n");\n  return new Function(\n    "uv",\n    "data",\n    "offset",\n    fragmentSrc\n  );\n}\n\n\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4OC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQXNEOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixJQUFJLHdFQUFjLFNBQVM7QUFDL0MsNEJBQTRCLHdFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixLQUFLLEVBQUU7QUFDNUIsdUJBQXVCLGVBQWU7QUFDdEMsVUFBVSx3RUFBYyxtQkFBbUIsd0VBQWM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsZ0NBQWdDO0FBQ2hDLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLWJ1dHRvbi8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvdXRpbHMvY3JlYXRlVWJvU3luY0Z1bmN0aW9uLm1qcz85NGU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuaWZvcm1QYXJzZXJzIH0gZnJvbSAnLi91bmlmb3JtUGFyc2Vycy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNyZWF0ZVVib1N5bmNGdW5jdGlvbih1Ym9FbGVtZW50cywgcGFyc2VyQ29kZSwgYXJyYXlHZW5lcmF0aW9uRnVuY3Rpb24sIHNpbmdsZVNldHRlcnNNYXApIHtcbiAgY29uc3QgZnVuY0ZyYWdtZW50cyA9IFtgXG4gICAgICAgIHZhciB2ID0gbnVsbDtcbiAgICAgICAgdmFyIHYyID0gbnVsbDtcbiAgICAgICAgdmFyIHQgPSAwO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBhcnJheU9mZnNldCA9IG51bGw7XG4gICAgYF07XG4gIGxldCBwcmV2ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1Ym9FbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHVib0VsZW1lbnQgPSB1Ym9FbGVtZW50c1tpXTtcbiAgICBjb25zdCBuYW1lID0gdWJvRWxlbWVudC5kYXRhLm5hbWU7XG4gICAgbGV0IHBhcnNlZCA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdW5pZm9ybVBhcnNlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IHVuaWZvcm1QYXJzZXIgPSB1bmlmb3JtUGFyc2Vyc1tqXTtcbiAgICAgIGlmICh1bmlmb3JtUGFyc2VyLnRlc3QodWJvRWxlbWVudC5kYXRhKSkge1xuICAgICAgICBvZmZzZXQgPSB1Ym9FbGVtZW50Lm9mZnNldCAvIDQ7XG4gICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChcbiAgICAgICAgICBgbmFtZSA9IFwiJHtuYW1lfVwiO2AsXG4gICAgICAgICAgYG9mZnNldCArPSAke29mZnNldCAtIHByZXZ9O2AsXG4gICAgICAgICAgdW5pZm9ybVBhcnNlcnNbal1bcGFyc2VyQ29kZV0gfHwgdW5pZm9ybVBhcnNlcnNbal0udWJvXG4gICAgICAgICk7XG4gICAgICAgIHBhcnNlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgaWYgKHVib0VsZW1lbnQuZGF0YS5zaXplID4gMSkge1xuICAgICAgICBvZmZzZXQgPSB1Ym9FbGVtZW50Lm9mZnNldCAvIDQ7XG4gICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChhcnJheUdlbmVyYXRpb25GdW5jdGlvbih1Ym9FbGVtZW50LCBvZmZzZXQgLSBwcmV2KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHNpbmdsZVNldHRlcnNNYXBbdWJvRWxlbWVudC5kYXRhLnR5cGVdO1xuICAgICAgICBvZmZzZXQgPSB1Ym9FbGVtZW50Lm9mZnNldCAvIDQ7XG4gICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChcbiAgICAgICAgICAvKiB3Z3NsICovXG4gICAgICAgICAgYFxuICAgICAgICAgICAgICAgICAgICB2ID0gdXYuJHtuYW1lfTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9ICR7b2Zmc2V0IC0gcHJldn07XG4gICAgICAgICAgICAgICAgICAgICR7dGVtcGxhdGV9O1xuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJldiA9IG9mZnNldDtcbiAgfVxuICBjb25zdCBmcmFnbWVudFNyYyA9IGZ1bmNGcmFnbWVudHMuam9pbihcIlxcblwiKTtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcbiAgICBcInV2XCIsXG4gICAgXCJkYXRhXCIsXG4gICAgXCJvZmZzZXRcIixcbiAgICBmcmFnbWVudFNyY1xuICApO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVYm9TeW5jRnVuY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVVib1N5bmNGdW5jdGlvbi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1888\n')},5600:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G: () => (/* binding */ uboSyncFunctionsWGSL),\n/* harmony export */   I: () => (/* binding */ uboSyncFunctionsSTD40)\n/* harmony export */ });\n\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        data[offset] = v;`,\n  "vec2<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  "vec3<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  "vec4<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  "mat2x2<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  "mat3x3<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  "mat4x4<f32>": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  "mat3x2<f32>": loopMatrix(3, 2),\n  "mat4x2<f32>": loopMatrix(4, 2),\n  "mat2x3<f32>": loopMatrix(2, 3),\n  "mat4x3<f32>": loopMatrix(4, 3),\n  "mat2x4<f32>": loopMatrix(2, 4),\n  "mat3x4<f32>": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  "mat2x2<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\n\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYwMC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsTUFBTSxRQUFRO0FBQ3RDLG1DQUFtQyxJQUFJLG1CQUFtQixJQUFJO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXVEO0FBQ3ZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtYnV0dG9uLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci91dGlscy91Ym9TeW5jRnVuY3Rpb25zLm1qcz80NTBmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbG9vcE1hdHJpeChjb2wsIHJvdykge1xuICBjb25zdCB0b3RhbCA9IGNvbCAqIHJvdztcbiAgcmV0dXJuIGBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAke3RvdGFsfTsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArICgoKGkgLyAke2NvbH0pfDApICogNCkgKyAoaSAlICR7Y29sfSldID0gdltpXTtcbiAgICAgICAgfVxuICAgIGA7XG59XG5jb25zdCB1Ym9TeW5jRnVuY3Rpb25zU1RENDAgPSB7XG4gIGYzMjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2O2AsXG4gIGkzMjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2O2AsXG4gIFwidmVjMjxmMzI+XCI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdlswXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHZbMV07YCxcbiAgXCJ2ZWMzPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07YCxcbiAgXCJ2ZWM0PGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgM10gPSB2WzNdO2AsXG4gIFwibWF0MngyPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyA0XSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgNV0gPSB2WzNdO2AsXG4gIFwibWF0M3gzPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgNF0gPSB2WzNdO1xuICAgICAgICBkYXRhW29mZnNldCArIDVdID0gdls0XTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyA2XSA9IHZbNV07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgOF0gPSB2WzZdO1xuICAgICAgICBkYXRhW29mZnNldCArIDldID0gdls3XTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxMF0gPSB2WzhdO2AsXG4gIFwibWF0NHg0PGYzMj5cIjogYFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgaV0gPSB2W2ldO1xuICAgICAgICB9YCxcbiAgXCJtYXQzeDI8ZjMyPlwiOiBsb29wTWF0cml4KDMsIDIpLFxuICBcIm1hdDR4MjxmMzI+XCI6IGxvb3BNYXRyaXgoNCwgMiksXG4gIFwibWF0MngzPGYzMj5cIjogbG9vcE1hdHJpeCgyLCAzKSxcbiAgXCJtYXQ0eDM8ZjMyPlwiOiBsb29wTWF0cml4KDQsIDMpLFxuICBcIm1hdDJ4NDxmMzI+XCI6IGxvb3BNYXRyaXgoMiwgNCksXG4gIFwibWF0M3g0PGYzMj5cIjogbG9vcE1hdHJpeCgzLCA0KVxufTtcbmNvbnN0IHVib1N5bmNGdW5jdGlvbnNXR1NMID0ge1xuICAuLi51Ym9TeW5jRnVuY3Rpb25zU1RENDAsXG4gIFwibWF0MngyPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgM10gPSB2WzNdO1xuICAgIGBcbn07XG5cbmV4cG9ydCB7IHVib1N5bmNGdW5jdGlvbnNTVEQ0MCwgdWJvU3luY0Z1bmN0aW9uc1dHU0wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVib1N5bmNGdW5jdGlvbnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5600\n')},8379:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   O: () => (/* binding */ uniformParsers)\n/* harmony export */ });\n\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: "mat3x3<f32>",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: ` \n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: "vec4<f32>",\n    test: (data) => data.type === "vec4<f32>" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: "vec2<f32>",\n    test: (data) => data.type === "vec2<f32>" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: "vec4<f32>",\n    test: (data) => data.type === "vec4<f32>" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: "vec3<f32>",\n    test: (data) => data.type === "vec3<f32>" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\n\n//# sourceMappingURL=uniformParsers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM3OS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtYnV0dG9uLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci91dGlscy91bmlmb3JtUGFyc2Vycy5tanM/NDBkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHVuaWZvcm1QYXJzZXJzID0gW1xuICAvLyB1cGxvYWRpbmcgcGl4aSBtYXRyaXggb2JqZWN0IHRvIG1hdDNcbiAge1xuICAgIHR5cGU6IFwibWF0M3gzPGYzMj5cIixcbiAgICB0ZXN0OiAoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlLmEgIT09IHZvaWQgMDtcbiAgICB9LFxuICAgIHVibzogYFxuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IHV2W25hbWVdLnRvQXJyYXkodHJ1ZSk7XG4gICAgICAgICAgICBkYXRhW29mZnNldF0gPSBtYXRyaXhbMF07XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDFdID0gbWF0cml4WzFdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IG1hdHJpeFsyXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgNF0gPSBtYXRyaXhbM107XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDVdID0gbWF0cml4WzRdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyA2XSA9IG1hdHJpeFs1XTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgOF0gPSBtYXRyaXhbNl07XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDldID0gbWF0cml4WzddO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxMF0gPSBtYXRyaXhbOF07XG4gICAgICAgIGAsXG4gICAgdW5pZm9ybTogYCBcbiAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYodWRbbmFtZV0ubG9jYXRpb24sIGZhbHNlLCB1dltuYW1lXS50b0FycmF5KHRydWUpKTtcbiAgICAgICAgYFxuICB9LFxuICAvLyB1cGxvYWRpbmcgYSBwaXhpIHJlY3RhbmdsZSBhcyBhIHZlYzRcbiAge1xuICAgIHR5cGU6IFwidmVjNDxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IGRhdGEudHlwZSA9PT0gXCJ2ZWM0PGYzMj5cIiAmJiBkYXRhLnNpemUgPT09IDEgJiYgZGF0YS52YWx1ZS53aWR0aCAhPT0gdm9pZCAwLFxuICAgIHVibzogYFxuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gdi54O1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHYueTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2LndpZHRoO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAzXSA9IHYuaGVpZ2h0O1xuICAgICAgICBgLFxuICAgIHVuaWZvcm06IGBcbiAgICAgICAgICAgIGN2ID0gdWRbbmFtZV0udmFsdWU7XG4gICAgICAgICAgICB2ID0gdXZbbmFtZV07XG4gICAgICAgICAgICBpZiAoY3ZbMF0gIT09IHYueCB8fCBjdlsxXSAhPT0gdi55IHx8IGN2WzJdICE9PSB2LndpZHRoIHx8IGN2WzNdICE9PSB2LmhlaWdodCkge1xuICAgICAgICAgICAgICAgIGN2WzBdID0gdi54O1xuICAgICAgICAgICAgICAgIGN2WzFdID0gdi55O1xuICAgICAgICAgICAgICAgIGN2WzJdID0gdi53aWR0aDtcbiAgICAgICAgICAgICAgICBjdlszXSA9IHYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih1ZFtuYW1lXS5sb2NhdGlvbiwgdi54LCB2LnksIHYud2lkdGgsIHYuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICB9LFxuICAvLyB1cGxvYWRpbmcgYSBwaXhpIHBvaW50IGFzIGEgdmVjMlxuICB7XG4gICAgdHlwZTogXCJ2ZWMyPGYzMj5cIixcbiAgICB0ZXN0OiAoZGF0YSkgPT4gZGF0YS50eXBlID09PSBcInZlYzI8ZjMyPlwiICYmIGRhdGEuc2l6ZSA9PT0gMSAmJiBkYXRhLnZhbHVlLnggIT09IHZvaWQgMCxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IHYueDtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMV0gPSB2Lnk7XG4gICAgICAgIGAsXG4gICAgdW5pZm9ybTogYFxuICAgICAgICAgICAgY3YgPSB1ZFtuYW1lXS52YWx1ZTtcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGlmIChjdlswXSAhPT0gdi54IHx8IGN2WzFdICE9PSB2LnkpIHtcbiAgICAgICAgICAgICAgICBjdlswXSA9IHYueDtcbiAgICAgICAgICAgICAgICBjdlsxXSA9IHYueTtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMmYodWRbbmFtZV0ubG9jYXRpb24sIHYueCwgdi55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICB9LFxuICAvLyB1cGxvYWRpbmcgYSBwaXhpIGNvbG9yIGFzIGEgdmVjNFxuICB7XG4gICAgdHlwZTogXCJ2ZWM0PGYzMj5cIixcbiAgICB0ZXN0OiAoZGF0YSkgPT4gZGF0YS50eXBlID09PSBcInZlYzQ8ZjMyPlwiICYmIGRhdGEuc2l6ZSA9PT0gMSAmJiBkYXRhLnZhbHVlLnJlZCAhPT0gdm9pZCAwLFxuICAgIHVibzogYFxuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gdi5yZWQ7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdi5ncmVlbjtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2LmJsdWU7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDNdID0gdi5hbHBoYTtcbiAgICAgICAgYCxcbiAgICB1bmlmb3JtOiBgXG4gICAgICAgICAgICBjdiA9IHVkW25hbWVdLnZhbHVlO1xuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgaWYgKGN2WzBdICE9PSB2LnJlZCB8fCBjdlsxXSAhPT0gdi5ncmVlbiB8fCBjdlsyXSAhPT0gdi5ibHVlIHx8IGN2WzNdICE9PSB2LmFscGhhKSB7XG4gICAgICAgICAgICAgICAgY3ZbMF0gPSB2LnJlZDtcbiAgICAgICAgICAgICAgICBjdlsxXSA9IHYuZ3JlZW47XG4gICAgICAgICAgICAgICAgY3ZbMl0gPSB2LmJsdWU7XG4gICAgICAgICAgICAgICAgY3ZbM10gPSB2LmFscGhhO1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih1ZFtuYW1lXS5sb2NhdGlvbiwgdi5yZWQsIHYuZ3JlZW4sIHYuYmx1ZSwgdi5hbHBoYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgfSxcbiAgLy8gdXBsb2FkaW5nIGEgcGl4aSBjb2xvciBhcyBhIHZlYzNcbiAge1xuICAgIHR5cGU6IFwidmVjMzxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IGRhdGEudHlwZSA9PT0gXCJ2ZWMzPGYzMj5cIiAmJiBkYXRhLnNpemUgPT09IDEgJiYgZGF0YS52YWx1ZS5yZWQgIT09IHZvaWQgMCxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IHYucmVkO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHYuZ3JlZW47XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDJdID0gdi5ibHVlO1xuICAgICAgICBgLFxuICAgIHVuaWZvcm06IGBcbiAgICAgICAgICAgIGN2ID0gdWRbbmFtZV0udmFsdWU7XG4gICAgICAgICAgICB2ID0gdXZbbmFtZV07XG4gICAgICAgICAgICBpZiAoY3ZbMF0gIT09IHYucmVkIHx8IGN2WzFdICE9PSB2LmdyZWVuIHx8IGN2WzJdICE9PSB2LmJsdWUpIHtcbiAgICAgICAgICAgICAgICBjdlswXSA9IHYucmVkO1xuICAgICAgICAgICAgICAgIGN2WzFdID0gdi5ncmVlbjtcbiAgICAgICAgICAgICAgICBjdlsyXSA9IHYuYmx1ZTtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2YodWRbbmFtZV0ubG9jYXRpb24sIHYucmVkLCB2LmdyZWVuLCB2LmJsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gIH1cbl07XG5cbmV4cG9ydCB7IHVuaWZvcm1QYXJzZXJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmlmb3JtUGFyc2Vycy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8379\n')},8572:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  u: () => (/* binding */ SharedRenderPipes),\n  c: () => (/* binding */ SharedSystems)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/extensions/Extensions.mjs\nvar Extensions = __webpack_require__(4240);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs\n\n\n"use strict";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "customRender"\n};\n\n\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs\n\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\n\n//# sourceMappingURL=executeInstructions.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs\n\n\n\n"use strict";\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderGroup);\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.worldTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "renderGroup"\n};\n\n\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/matrix/Matrix.mjs\nvar Matrix = __webpack_require__(328);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs\n\nfunction buildInstructions(renderGroup, renderPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererPipes) {\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderPipes) {\n  if (container.renderPipeId) {\n    renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n    container.didViewUpdate = false;\n    const rp = renderPipes;\n    rp[container.renderPipeId].addRenderable(container, instructionSet);\n  }\n  if (!container.isRenderGroupRoot) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderPipes);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderPipes, isRoot) {\n  if (!isRoot && container.isRenderGroupRoot) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderPipeId = container.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n      container.didViewUpdate = false;\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(container, instructionSet);\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderPipes);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\n\n//# sourceMappingURL=buildInstructions.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/collectRenderGroups.mjs\n\nfunction collectRenderGroups(renderGroup, out = []) {\n  out.push(renderGroup);\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n  }\n  return out;\n}\n\n\n//# sourceMappingURL=collectRenderGroups.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/Container.mjs + 12 modules\nvar Container = __webpack_require__(9904);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/utils/mixColors.mjs + 1 modules\nvar mixColors = __webpack_require__(5872);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs\n\n\n\n"use strict";\nconst tempContainer = new Container/* Container */.q4();\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick;\n  renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      updateTransformAndChildren(list[i], updateTick, 0);\n    }\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = (0,mixColors/* mixColors */._)(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.isRenderGroupRoot) {\n    updateFlags = updateFlags | container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.isRenderGroupRoot) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.renderGroup;\n    if (container.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & Container/* UPDATE_COLOR */.ib) {\n    container.groupColor = (0,mixColors/* mixColors */._)(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & Container/* UPDATE_BLEND */.aA) {\n    container.groupBlendMode = container.localBlendMode === "inherit" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & Container/* UPDATE_VISIBLE */.Ej) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\n\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs\n\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\n\n//# sourceMappingURL=validateRenderables.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs\n\n\n\n\n\n\n\n\n"use strict";\nconst tempMatrix = new Matrix/* Matrix */.W();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    container.isRenderGroup = true;\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const renderGroups = collectRenderGroups(container.renderGroup, []);\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    for (let i = 0; i < renderGroups.length; i++) {\n      const renderGroup = renderGroups[i];\n      renderGroup.runOnRender();\n      renderGroup.instructionSet.renderPipes = renderPipes;\n      if (!renderGroup.structureDidChange) {\n        validateRenderables(renderGroup, renderPipes);\n      }\n      updateRenderGroupTransforms(renderGroup);\n      if (renderGroup.structureDidChange) {\n        renderGroup.structureDidChange = false;\n        buildInstructions(renderGroup, renderPipes);\n      } else {\n        updateRenderables(renderGroup);\n      }\n      renderGroup.childrenRenderablesToUpdate.index = 0;\n      renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    }\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem,\n    Extensions/* ExtensionType */.y6.CanvasSystem\n  ],\n  name: "renderGroup"\n};\nfunction updateRenderables(renderGroup) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    if (container.didViewUpdate) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\n\n\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/pool/PoolGroup.mjs\nvar PoolGroup = __webpack_require__(2540);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs\nvar BatchableSprite = __webpack_require__(3976);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs\n\n\n\n\n"use strict";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    PoolGroup/* BigPool */.u.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = PoolGroup/* BigPool */.u.get(BatchableSprite/* BatchableSprite */.a);\n    batchableSprite.renderable = sprite;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite._didSpriteUpdate = false;\n    sprite.on("destroyed", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      PoolGroup/* BigPool */.u.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "sprite"\n};\n\n\n//# sourceMappingURL=SpritePipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs\nvar State = __webpack_require__(9952);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/batcher/gpu/BatchGeometry.mjs\nvar BatchGeometry = __webpack_require__(1944);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/batcher/shared/Batcher.mjs + 3 modules\nvar Batcher = __webpack_require__(3580);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs\n\n\n\n\n\n"use strict";\nclass BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State/* State */.A.for2d();\n    this._batches = /* @__PURE__ */ Object.create(null);\n    this._geometries = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init(this);\n  }\n  buildStart(instructionSet) {\n    if (!this._batches[instructionSet.uid]) {\n      const batcher = new Batcher/* Batcher */.h();\n      this._batches[instructionSet.uid] = batcher;\n      this._geometries[batcher.uid] = new BatchGeometry/* BatchGeometry */.W();\n    }\n    this._activeBatch = this._batches[instructionSet.uid];\n    this._activeGeometry = this._geometries[this._activeBatch.uid];\n    this._activeBatch.begin();\n  }\n  addToBatch(batchableObject) {\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    const activeBatch = this._activeBatch;\n    const geometry = this._activeGeometry;\n    activeBatch.finish(instructionSet);\n    geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n    geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n  }\n  upload(instructionSet) {\n    const batcher = this._batches[instructionSet.uid];\n    const geometry = this._geometries[batcher.uid];\n    if (batcher.dirty) {\n      batcher.dirty = false;\n      geometry.buffers[0].update(batcher.attributeSize * 4);\n    }\n  }\n  execute(batch) {\n    if (batch.action === "startBatch") {\n      const batcher = batch.batcher;\n      const geometry = this._geometries[batcher.uid];\n      this._adaptor.start(this, geometry);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    for (const i in this._batches) {\n      this._batches[i].destroy();\n    }\n    this._batches = null;\n    for (const i in this._geometries) {\n      this._geometries[i].destroy();\n    }\n    this._geometries = null;\n  }\n}\n/** @ignore */\nBatcherPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "batch"\n};\n\n\n//# sourceMappingURL=BatcherPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/filters/FilterEffect.mjs\nvar FilterEffect = __webpack_require__(5476);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs + 7 modules\nvar GlProgram = __webpack_require__(9144);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs + 6 modules\nvar GpuProgram = __webpack_require__(4292);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs + 1 modules\nvar UniformGroup = __webpack_require__(2528);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureMatrix.mjs\nvar TextureMatrix = __webpack_require__(9752);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs\nvar Shader = __webpack_require__(1656);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/Filter.mjs\n\n\n\n\n\n"use strict";\nconst _Filter = class _Filter extends Shader/* Shader */.g {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    this._state = State/* State */.A.for2d();\n    this.padding = options.padding;\n    if (typeof options.antialias === "boolean") {\n      this.antialias = options.antialias ? "on" : "off";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.addResource("uTexture", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default "normal"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram/* GpuProgram */.u.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram/* GlProgram */.Q.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/**\n * The default filter settings\n * @static\n */\n_Filter.defaultOptions = {\n  blendMode: "normal",\n  resolution: 1,\n  padding: 0,\n  antialias: "off",\n  blendRequired: false\n};\nlet Filter = _Filter;\n\n\n//# sourceMappingURL=Filter.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/mask.frag.mjs\nvar fragment = "in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha; \\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * uAlpha * clip);\\n\\n    finalColor = original;\\n}\\n";\n\n\n//# sourceMappingURL=mask.frag.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/mask.vert.mjs\nvar vertex = "in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n";\n\n\n//# sourceMappingURL=mask.vert.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs\nvar source = "struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,  \\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n};\\n\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n  };\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n\\n  \\n  return gfu.uGlobalFrame.zw;\\n}\\n  \\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>, \\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n\\n     var clip = step(3.5,\\n        step(maskClamp.x, filterUv.x) +\\n        step(maskClamp.y, filterUv.y) +\\n        step(filterUv.x, maskClamp.z) +\\n        step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    \\n    var npmAlpha = 0.0;\\n\\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\\n\\n    var a = (alphaMul * mask.r) * clip;\\n\\n    return vec4(source.rgb, source.a) * a;\\n}";\n\n\n//# sourceMappingURL=mask.wgsl.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs\n\n\n\n\n\n\n\n\n\n\n"use strict";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix/* TextureMatrix */.U(sprite.texture);\n    const filterUniforms = new UniformGroup/* UniformGroup */.W({\n      uFilterMatrix: { value: new Matrix/* Matrix */.W(), type: "mat3x3<f32>" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: "vec4<f32>" },\n      uAlpha: { value: 1, type: "f32" }\n    });\n    const gpuProgram = GpuProgram/* GpuProgram */.u.from({\n      vertex: {\n        source: source,\n        entryPoint: "mainVertex"\n      },\n      fragment: {\n        source: source,\n        entryPoint: "mainFragment"\n      }\n    });\n    const glProgram = GlProgram/* GlProgram */.Q.from({\n      vertex: vertex,\n      fragment: fragment,\n      name: "mask-filter"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\n\n//# sourceMappingURL=MaskFilter.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/bounds/Bounds.mjs\nvar Bounds = __webpack_require__(5008);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/bounds/getGlobalBounds.mjs\nvar getGlobalBounds = __webpack_require__(1600);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/sprite/Sprite.mjs\nvar Sprite = __webpack_require__(8240);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs + 2 modules\nvar Texture = __webpack_require__(8518);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TexturePool.mjs\nvar TexturePool = __webpack_require__(6899);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs\n\n\n\n\n\n\n\n\n\n\n\n"use strict";\nconst tempBounds = new Bounds/* Bounds */.Q();\nclass AlphaMaskEffect extends FilterEffect/* FilterEffect */.S {\n  constructor() {\n    super({\n      filters: [new MaskFilter({\n        sprite: new Sprite/* Sprite */.Q(Texture/* Texture */.w.EMPTY)\n      })]\n    });\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "alphaMask",\n      action: "pushMaskBegin",\n      mask,\n      canBundle: false,\n      maskedContainer\n    });\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer.renderPipes\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "alphaMask",\n      action: "pushMaskEnd",\n      mask,\n      maskedContainer,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "alphaMask",\n      action: "popMaskEnd",\n      mask,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === "pushMaskBegin") {\n      const filterEffect = PoolGroup/* BigPool */.u.get(AlphaMaskEffect);\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = (0,getGlobalBounds/* getGlobalBounds */.Gi)(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const filterTexture = TexturePool/* TexturePool */.W.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          1,\n          false\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === "pushMaskEnd") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: "filter",\n        action: "pushFilter",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === "popMaskEnd") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool/* TexturePool */.W.returnTexture(maskData.filterTexture);\n      }\n      PoolGroup/* BigPool */.u.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "alphaMask"\n};\n\n\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs\n\n\n"use strict";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: "colorMask",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: "colorMask",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "colorMask"\n};\n\n\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs\nvar gl_const = __webpack_require__(1260);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs\nvar state_const = __webpack_require__(6204);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs\n\n\n\n\n\n"use strict";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, "none", instructionSet);\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "pushMaskBegin",\n      mask,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer.renderPipes\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "pushMaskEnd",\n      mask,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, "none", instructionSet);\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "popMaskBegin",\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "popMaskEnd",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === "pushMaskBegin") {\n      renderer.renderTarget.ensureDepthStencil();\n      maskStackIndex++;\n      renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.k.RENDERING_MASK_ADD, maskStackIndex);\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === "pushMaskEnd") {\n      renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.k.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === "popMaskBegin") {\n      maskStackIndex--;\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.k.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, gl_const/* CLEAR */.U.STENCIL);\n        renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.k.DISABLED, maskStackIndex);\n      }\n    } else if (instruction.action === "popMaskEnd") {\n      renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.k.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "stencilMask"\n};\n\n\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/color/Color.mjs + 2 modules\nvar Color = __webpack_require__(5536);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs\n\n\n\n"use strict";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color/* Color */.g(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem,\n    Extensions/* ExtensionType */.y6.CanvasSystem\n  ],\n  name: "background",\n  priority: 0\n};\n/**\n * default options used by the system\n * @ignore\n */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\n\n//# sourceMappingURL=BackgroundSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/logging/warn.mjs\nvar warn = __webpack_require__(8796);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs\n\n\n\n\n"use strict";\nconst BLEND_MODE_FILTERS = {};\nExtensions/* extensions */.Yt.handle(Extensions/* ExtensionType */.y6.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error("BlendMode extension must have a name property");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      (0,warn/* warn */.m)(`Unable to assign BlendMode: \'${blendMode}\'. You may want to include: import \'pixi.js/advanced-blend-modes\'`);\n      return;\n    }\n    if (!this._filterHash[blendMode]) {\n      this._filterHash[blendMode] = new FilterEffect/* FilterEffect */.S({\n        filters: [new BLEND_MODE_FILTERS[blendMode]()]\n      });\n    }\n    const instruction = {\n      renderPipeId: "filter",\n      action: "pushFilter",\n      renderables: [],\n      filterEffect: this._filterHash[blendMode],\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "filter",\n      action: "popFilter",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLPipes,\n    Extensions/* ExtensionType */.y6.WebGPUPipes,\n    Extensions/* ExtensionType */.y6.CanvasPipes\n  ],\n  name: "blendMode"\n};\n\n\n//# sourceMappingURL=BlendModePipe.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs\n\n\n\n\n"use strict";\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container/* Container */.q4 || options instanceof Texture/* Texture */.w) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error("ICanvas.toBlob failed!"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, format, quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(format, quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: format, quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error("Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture/* Texture */.w) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy();\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture/* Texture */.w ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container/* Container */.q4) {\n      texture.destroy();\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture/* Texture */.w)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement("a");\n    link.download = options.filename ?? "image.png";\n    link.href = canvas.toDataURL("image/png");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what\'s happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      "font-size: 1px;",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      "background-size: contain;"\n    ].join(" ");\n    console.log("%c ", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem\n  ],\n  name: "extract"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: "png",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\n\n//# sourceMappingURL=ExtractSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs\nvar Rectangle = __webpack_require__(5520);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/bounds/getLocalBounds.mjs\nvar getLocalBounds = __webpack_require__(912);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs + 2 modules\nvar TextureSource = __webpack_require__(5904);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs\n\n\n\n"use strict";\nclass RenderTexture extends Texture/* Texture */.w {\n  static create(options) {\n    return new Texture/* Texture */.w({\n      source: new TextureSource/* TextureSource */.S(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\n\n//# sourceMappingURL=RenderTexture.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs\n\n\n\n\n\n\n\n\n\n"use strict";\nconst tempRect = new Rectangle/* Rectangle */.Y();\nconst GenerateTextureSystem_tempBounds = new Bounds/* Bounds */.Q();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer\'s resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container/* Container */.q4) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color/* Color */.g.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || (0,getLocalBounds/* getLocalBounds */.C)(container, GenerateTextureSystem_tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix/* Matrix */.W.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem\n  ],\n  name: "textureGenerator"\n};\n\n\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/point/Point.mjs\nvar Point = __webpack_require__(1154);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs\nvar colorToUniform = __webpack_require__(9652);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/BindGroup.mjs\nvar BindGroup = __webpack_require__(8384);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/types.mjs\nvar types = __webpack_require__(8640);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs\n\n\n\n\n\n\n\n\n"use strict";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix/* Matrix */.W(),\n      worldColor: 4294967295,\n      offset: new Point/* Point */.w()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    (0,colorToUniform/* color32BitToUniform */.u)(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup/* BindGroup */.w();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === types/* RendererType */.G.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup/* UniformGroup */.W({\n      uProjectionMatrix: { value: new Matrix/* Matrix */.W(), type: "mat3x3<f32>" },\n      uWorldTransformMatrix: { value: new Matrix/* Matrix */.W(), type: "mat3x3<f32>" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: "vec4<f32>" },\n      uResolution: { value: [0, 0], type: "vec2<f32>" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem,\n    Extensions/* ExtensionType */.y6.CanvasSystem\n  ],\n  name: "globalUniforms"\n};\n\n\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/sayHello.mjs\nvar sayHello = __webpack_require__(1032);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs\n\n\n\n\n"use strict";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === types/* RendererType */.G.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      (0,sayHello/* sayHello */._)(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem,\n    Extensions/* ExtensionType */.y6.CanvasSystem\n  ],\n  name: "hello",\n  priority: -2\n};\n/** @ignore */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\n\n//# sourceMappingURL=HelloSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs\n\n\n"use strict";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem\n  ],\n  name: "textureGC"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCAMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\nExtensions/* extensions */.Yt.add(TextureGCSystem);\n\n\n//# sourceMappingURL=TextureGCSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/environment/adapter.mjs + 1 modules\nvar adapter = __webpack_require__(184);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/logging/deprecation.mjs\nvar deprecation = __webpack_require__(8592);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs\nvar RenderTarget = __webpack_require__(4876);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs\nvar getCanvasTexture = __webpack_require__(9196);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs\n\n\n\n\n\n\n\n"use strict";\nconst _ViewSystem = class _ViewSystem {\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      (0,deprecation/* deprecation */.e)(deprecation/* v8_0_0 */.q, "ViewSystem.view has been renamed to ViewSystem.canvas");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle/* Rectangle */.Y(0, 0, options.width, options.height);\n    this.canvas = options.canvas || adapter/* DOMAdapter */.m.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = (0,getCanvasTexture/* getCanvasTexture */.K)(this.canvas, options);\n    this.renderTarget = new RenderTarget/* RenderTarget */.K({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.multiView = !!options.multiView;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${this.texture.width}px`;\n      this.canvas.style.height = `${this.texture.height}px`;\n    }\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${desiredScreenWidth}px`;\n      this.canvas.style.height = `${desiredScreenHeight}px`;\n    }\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or "false".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === "boolean" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.y6.WebGLSystem,\n    Extensions/* ExtensionType */.y6.WebGPUSystem,\n    Extensions/* ExtensionType */.y6.CanvasSystem\n  ],\n  name: "view",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\n\n//# sourceMappingURL=ViewSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"use strict";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\n\n//# sourceMappingURL=SharedSystems.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8572\n')},9196:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   K: () => (/* binding */ getCanvasTexture)\n/* harmony export */ });\n/* unused harmony export hasCachedCanvasTexture */\n/* harmony import */ var _sources_CanvasSource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1468);\n/* harmony import */ var _Texture_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8518);\n\n\n\n"use strict";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new _Texture_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Texture */ .w({\n      source: new _sources_CanvasSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .CanvasSource */ .K({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once("destroy", onDestroy);\n    texture.source.once("destroy", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\n\n//# sourceMappingURL=getCanvasTexture.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTE5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDbEI7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDBEQUFPO0FBQy9CLGtCQUFrQiw0RUFBWTtBQUM5QjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVvRDtBQUNwRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLWJ1dHRvbi8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL3V0aWxzL2dldENhbnZhc1RleHR1cmUubWpzP2QyYTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FudmFzU291cmNlIH0gZnJvbSAnLi4vc291cmNlcy9DYW52YXNTb3VyY2UubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi9UZXh0dXJlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgY2FudmFzQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0Q2FudmFzVGV4dHVyZShjYW52YXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFjYW52YXNDYWNoZS5oYXMoY2FudmFzKSkge1xuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSh7XG4gICAgICBzb3VyY2U6IG5ldyBDYW52YXNTb3VyY2Uoe1xuICAgICAgICByZXNvdXJjZTogY2FudmFzLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9KVxuICAgIH0pO1xuICAgIGNvbnN0IG9uRGVzdHJveSA9ICgpID0+IHtcbiAgICAgIGlmIChjYW52YXNDYWNoZS5nZXQoY2FudmFzKSA9PT0gdGV4dHVyZSkge1xuICAgICAgICBjYW52YXNDYWNoZS5kZWxldGUoY2FudmFzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRleHR1cmUub25jZShcImRlc3Ryb3lcIiwgb25EZXN0cm95KTtcbiAgICB0ZXh0dXJlLnNvdXJjZS5vbmNlKFwiZGVzdHJveVwiLCBvbkRlc3Ryb3kpO1xuICAgIGNhbnZhc0NhY2hlLnNldChjYW52YXMsIHRleHR1cmUpO1xuICB9XG4gIHJldHVybiBjYW52YXNDYWNoZS5nZXQoY2FudmFzKTtcbn1cbmZ1bmN0aW9uIGhhc0NhY2hlZENhbnZhc1RleHR1cmUoY2FudmFzKSB7XG4gIHJldHVybiBjYW52YXNDYWNoZS5oYXMoY2FudmFzKTtcbn1cblxuZXhwb3J0IHsgZ2V0Q2FudmFzVGV4dHVyZSwgaGFzQ2FjaGVkQ2FudmFzVGV4dHVyZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Q2FudmFzVGV4dHVyZS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9196\n')}}]);