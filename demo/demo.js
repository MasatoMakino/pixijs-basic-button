(()=>{"use strict";var __webpack_modules__={3917:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./esm/BasicButtonContext.js\nclass BasicButtonContext {\n  constructor(target, buttonValue) {\n    this.target = target;\n    this.buttonValue = buttonValue;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 8 modules\nvar lib = __webpack_require__(2539);\n;// CONCATENATED MODULE: ./esm/BasicClickButton.js\n\n\n/**\n * 基本ボタンクラス。\n * 選択状態を持たず、クリックした時点で結果が反映されるタイプのボタンです。\n *\n * 正常動作のために、stageにenableMouseOverを実行する必要があります。\n * stageのインスタンス化のタイミングで実行してください。\n *  stage.enableMouseOver();\n */\nclass BasicClickButton extends lib/* Container */.mcf {\n  /**\n   * コンストラクタ\n   * @param {ButtonMaterialSet} materials 状態セット\n   */\n  constructor(materials) {\n    super();\n    this.isDisable = false; //ボタンが使用不可状態か否か\n    this.isPressed = false; //ボタンが押されているか否か\n    this.isOver = false; //マウスオーバーしているか否か\n    /**\n     * ボタンの凍結状態。\n     * trueに設定すると、ボタンの状態と外見を維持したまま、マウス操作を無視する。\n     */\n    this._frozen = false;\n    this._buttonValue = undefined; //このボタンに割り当てられた値\n    /*ボタンラベル*/\n    this._labelField = []; //ラベル表示用のテキストフィールド\n    this.labelColors = []; //ラベルの色のセット。各状態のラベルの文字色を格納する。\n    this.eventMode = "static";\n    this.cursor = "pointer";\n    this.setMouseEvents();\n    if (materials) this.initMaterial(materials);\n  }\n  /**\n   * ボタンに対するマウスハンドリングを開始する。\n   */\n  setMouseEvents() {\n    this.on("pointerdown", e => {\n      this.pressButton(e);\n    });\n    this.on("pointerup", e => {\n      this.releaseButton(e);\n    });\n    this.on("pointerover", e => {\n      this.overButton(e);\n    });\n    this.on("pointerout", e => {\n      this.outButton(e);\n    });\n  }\n  /**\n   * ボタンに状態マテリアルを設定する。\n   * @param materials\n   */\n  initMaterial(materials) {\n    //すでにmaterialが設定済みの場合、以前のマテリアルを削除する。\n    if (this.material) {\n      ButtonMaterialSet.remove(this.material);\n      this.material = undefined;\n    }\n    this.material = materials;\n    ButtonMaterialSet.addChild(this, materials);\n    this.updateMaterialVisible(this.getButtonState());\n    //テキストラベルがあったら最前線に。\n    this._labelField.forEach(label => {\n      this.removeChild(label);\n      this.addChild(label);\n    });\n  }\n  /**\n   * 状態表示およびラベル文字色を、状態に応じて更新する。\n   * @param state\n   */\n  updateMaterialVisible(state) {\n    ButtonMaterialSet.updateVisible(this.material, state);\n    this._labelField.forEach((label, index) => {\n      ButtonLabelColorSet.update(label, this.labelColors[index], state);\n    });\n  }\n  /**\n   * ボタン上でマウスダウンした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  pressButton(evt) {\n    if (!this.checkActivity()) return;\n    this.isPressed = true;\n    this.updateMaterialVisible("normal_down");\n  }\n  /**\n   * ボタン上でマウスアップした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  releaseButton(evt) {\n    if (!this.checkActivity()) return;\n    if (!this.isPressed) return;\n    this.isPressed = false;\n    this.updateMaterialVisible(this.isOver ? "normal_over" : "normal");\n  }\n  /**\n   * ボタンにマウスオーバーした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  overButton(evt) {\n    this.isOver = true;\n    if (!this.checkActivity()) return;\n    this.updateMaterialVisible("normal_over");\n  }\n  /**\n   * ボタンからマウスアウトした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  outButton(evt) {\n    this.isOver = false;\n    this.isPressed = false;\n    if (!this.checkActivity()) return;\n    this.updateMaterialVisible("normal");\n  }\n  /**\n   * ボタンを非活性化する\n   */\n  disableButton() {\n    this.isDisable = true;\n    this.updateMouseEnabled();\n    this.updateMaterialVisible("disable");\n  }\n  /**\n   * ボタンを活性化する\n   */\n  enableButton() {\n    this.isDisable = false;\n    this.updateMouseEnabled();\n    this.updateMaterialVisible("normal");\n  }\n  get frozen() {\n    return this._frozen;\n  }\n  set frozen(value) {\n    this._frozen = value;\n    this.updateMouseEnabled();\n  }\n  updateMouseEnabled() {\n    this.eventMode = !this.isDisable && !this._frozen ? "static" : "none";\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    return !this.isDisable && !this._frozen && this.eventMode !== "none";\n  }\n  /**\n   * 現在のボタンの状態を取得する\n   * @returns {BasicButtonState}\n   */\n  getButtonState() {\n    if (this.isDisable) return "disable";else return "normal";\n  }\n  /**\n   * ボタンラベルを追加する。\n   * @param x ラベル位置\n   * @param y ラベル位置\n   * @param label ラベルに表示する文言\n   * @param style\n   * @param color\n   * @return テキストフィールドのインデックス値\n   */\n  addLabel(x, y, label, style, color) {\n    this.labelColors.push(color);\n    style.fill = color.normal;\n    style.textBaseline = "ideographic";\n    const field = new lib/* Text */.EYj({\n      text: label,\n      style: style\n    });\n    this._labelField.push(field);\n    field.x = x;\n    field.y = y;\n    field.eventMode = "none";\n    this.addChild(field);\n    return this._labelField.indexOf(field);\n  }\n  /**\n   * ボタンラベルに表示されている文言を取得する。\n   * @returns {string}\n   */\n  getLabel(index) {\n    if (!this._labelField) return undefined;\n    return this._labelField[index].text;\n  }\n  /**\n   * ボタンラベルの文言を更新する。\n   * @param index\n   * @param value\n   */\n  setLabel(index, value) {\n    if (this._labelField.length === 0) {\n      console.warn("BasicButton : " + "ボタンラベルが初期化されていませんが、ラベルの文言が指定されました。" + "文言を指定する前にラベルの初期化をaddLabel関数で行ってください。");\n      return;\n    }\n    if (this._labelField[index] === undefined) {\n      console.warn("BasicButton : " + `指定されたindex : ${index}にラベルが存在しません。`);\n      return;\n    }\n    const field = this._labelField[index];\n    if (field.text === value) return;\n    field.text = value;\n  }\n  getLabelField(index) {\n    return this._labelField[index];\n  }\n  get buttonValue() {\n    return this._buttonValue;\n  }\n  set buttonValue(value) {\n    if (this._buttonValue != value) {\n      this._buttonValue = value;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicCheckButton.js\n\n//参照順序ミスが発生するため、indexではなくBasicClickButtonからインポートする。\n\n/**\n * 選択状態を持つボタンクラス。\n */\nclass BasicCheckButton extends BasicClickButton {\n  get selectionState() {\n    return this._selectionState;\n  }\n  constructor(materials) {\n    super(materials);\n    this._selectionState = new SelectionState();\n  }\n  pressButton(evt) {\n    if (!this.checkActivity()) return;\n    this.isPressed = true;\n    this.updateMaterialVisible(this._selectionState.isSelected ? "select_down" : "normal_down");\n  }\n  releaseButton(evt) {\n    if (!this.checkActivity()) return;\n    if (!this.isPressed) return;\n    this.isPressed = false;\n    if (this._selectionState.isSelected) this.deselectButton(evt);else this.selectButton(evt);\n  }\n  overButton(evt) {\n    super.overButton(evt);\n    if (!this.checkActivity()) return;\n    this.updateMaterialVisible(this._selectionState.isSelected ? "select_over" : "normal_over");\n  }\n  outButton(evt) {\n    super.outButton(evt);\n    if (!this.isDisable) {\n      this.updateMaterialVisible(this._selectionState.isSelected ? "select" : "normal");\n    }\n    if (!this.checkActivity()) return;\n  }\n  /**\n   * ボタンを選択する。\n   * @param evt\n   */\n  selectButton(evt) {\n    if (this._selectionState.isSelected) return;\n    this._selectionState.isSelected = true;\n    if (!this.isDisable) {\n      this.updateMaterialVisible(this.isOver ? "select_over" : "select");\n    }\n    const buttonEvt = new BasicButtonContext(this, this.buttonValue);\n    this._selectionState.emit("selected", buttonEvt);\n  }\n  /**\n   * ボタンの選択を解除する。\n   * @param evt\n   */\n  deselectButton(evt) {\n    if (!this._selectionState.isSelected) return;\n    if (!this.isDisable) {\n      this.updateMaterialVisible(this.isOver ? "normal_over" : "normal");\n    }\n    this._selectionState.isSelected = false;\n    const buttonEvt = new BasicButtonContext(this, this.buttonValue);\n    this._selectionState.emit("unselected", buttonEvt);\n  }\n  enableButton() {\n    super.enableButton();\n    this.updateMaterialVisible(this._selectionState.isSelected ? "select" : "normal");\n  }\n  getButtonState() {\n    if (this.isDisable) return "disable";else {\n      if (this._selectionState?.isSelected) return "select";else return "normal";\n    }\n  }\n  /**\n   * 選択状態を取得する。\n   * @returns {boolean}\n   */\n  get selection() {\n    return this.selectionState.isSelected;\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicRadioButton.js\n\n/**\n * 排他的に選択可能なボタン。ラジオボタンのセットはBasicRadioButtonManagerで設定する。\n */\nclass BasicRadioButton extends BasicCheckButton {\n  constructor(materials) {\n    super(materials);\n    this._selectionState.on("selected", () => {\n      this.cursor = "auto";\n    });\n    this._selectionState.on("unselected", () => {\n      this.cursor = "pointer";\n    });\n  }\n  /**\n   * ボタンを選択する。\n   * @param evt\n   */\n  selectButton(evt) {\n    if (this._selectionState.isSelected) return;\n    this._selectionState.isSelected = true;\n    if (!this.isDisable) {\n      //ラジオボタンは選択した時点で操作不可となる。そのためSELECT_OVERには遷移しない。\n      this.updateMaterialVisible("select");\n    }\n    const buttonEvt = new BasicButtonContext(this, this.buttonValue);\n    this._selectionState.emit("selected", buttonEvt);\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する。\n   * ラジオボタンは選択中も操作が無効となる。\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    if (this._selectionState.isSelected) return false;\n    return super.checkActivity();\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicRadioButtonManager.js\n\n\n/**\n * 排他的に選択されるボタンを制御するクラスです。\n *\n * メンバーのBasicRadioButtonが変更されると、このクラスに変更内容が通知されます。\n * このクラスは変更通知に応じ、他のBasicRadioButtonオブジェクトの選択状態を変更します。\n * また、このクラスは変更内容をEventとして発信します。\n *\n * 利用する際には以下のような手順でインスタンス化してください。\n *\n * const btn:BasicRadioButton = new BasicRadioButton(...);\n * const manager:BasicRadioButtonManager = new BasicRadioButtonManager(); //インスタンス化\n * manager.addButton(btn);\n * manager.selected = btn; //デフォルトで選択されているボタンを指定\n */\nclass BasicRadioButtonManager extends lib/* EventEmitter */.bkB {\n  constructor() {\n    super(...arguments);\n    this._buttons = [];\n    this._selected = undefined;\n  }\n  /**\n   * ラジオボタンのグループにボタンを追加する。\n   * @param {BasicRadioButton} button\n   */\n  add(button) {\n    this._buttons.push(button);\n    button.selectionState.on("selected", e => {\n      const ctx = e;\n      this.deselectOthers(ctx.target);\n    });\n  }\n  /**\n   * ボタンを選択する。\n   * nullを引数に取ると全ての選択を解除する。\n   * @param {BasicRadioButton} selectedButton\n   */\n  set selected(selectedButton) {\n    this._selected = selectedButton;\n    if (selectedButton == null) {\n      this.deselectAllButtons();\n      return;\n    }\n    //選択されたボタンがこのインスタンスの管理下か確認する。\n    const index = this._buttons.indexOf(selectedButton);\n    if (index === -1) {\n      console.warn("BasicRadioButtonManager : " + "選択対象として指定されたボタンが、BasicRadioButtonManagerの管理下にありません。" + "指定を行う前にaddButton関数でボタンをBasicRadioButtonManagerに登録してください。");\n      return;\n    }\n    selectedButton.selectButton();\n  }\n  /**\n   * 選択済みのボタンを取得する。\n   * 選択されていない場合はnullを返す。\n   * @returns {BasicRadioButton | null}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * 指定されたボタン以外の選択を解除し、BasicRadioButtonManagerからSELECTEDイベントを発行する。\n   * @param {BasicRadioButton} selectedButton\n   * @param {boolean} isDispatchSelectEvent\n   */\n  deselectOthers(selectedButton, isDispatchSelectEvent = true) {\n    this._selected = selectedButton;\n    for (let btn of this._buttons) {\n      if (btn != selectedButton) {\n        btn.deselectButton();\n      }\n    }\n    if (isDispatchSelectEvent) {\n      const evt = new BasicButtonContext(this._selected, this._selected.buttonValue);\n      evt.index = this._buttons.indexOf(this._selected);\n      this.emit("selected", evt);\n    }\n  }\n  /**\n   * 管理下の全てのボタンの選択を解除する。\n   */\n  deselectAllButtons() {\n    this._selected = undefined;\n    for (let btn of this._buttons) {\n      btn.deselectButton();\n    }\n    const evt = new BasicButtonContext(undefined, undefined);\n    this.emit("unselected", evt);\n  }\n  disableAll() {\n    for (let btn of this._buttons) {\n      btn.disableButton();\n    }\n  }\n  disableMouseAll() {\n    for (let btn of this._buttons) {\n      btn.eventMode = "none";\n    }\n  }\n  enableAll() {\n    for (let btn of this._buttons) {\n      btn.enableButton();\n    }\n  }\n  enableMouseAll() {\n    for (let btn of this._buttons) {\n      btn.eventMode = "static";\n    }\n  }\n  /**\n   * 現在選択されているボタンのbuttonValueを取得する。\n   * 選択されたボタンがない場合はnullを返す。\n   * @returns {any}\n   */\n  get selectedButtonValue() {\n    const btn = this.selected;\n    if (btn) {\n      return btn.buttonValue;\n    }\n    return undefined;\n  }\n  /**\n   * このインスタンスで管理をしているラジオボタンの配列を取得する。\n   * @returns {BasicRadioButton[]}\n   */\n  get buttons() {\n    return this._buttons;\n  }\n  /**\n   * buttonValueを検索キーとして、該当するボタンを取得する。\n   * 該当するボタンがない場合はnullを返す。\n   *\n   * @param value\n   * @returns {BasicRadioButton | null}\n   */\n  getButton(value) {\n    for (let btn of this._buttons) {\n      if (btn.buttonValue === value && btn.buttonValue != null) {\n        return btn;\n      }\n    }\n    return null;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ButtonMaterialSet.js\nclass ButtonOptionSet {\n  /**\n   * stateに対応するオプション値を取り出す\n   * @param set\n   * @param state\n   */\n  static getMaterial(set, state) {\n    switch (state) {\n      case "disable":\n        return set.disable ?? set.normal;\n      case "normal_over":\n        return set.over ?? set.normal;\n      case "normal_down":\n        return set.down ?? set.normal;\n      case "select":\n        return set.selectNormal ?? set.normal;\n      case "select_over":\n        return set.selectOver ?? set.normal;\n      case "select_down":\n        return set.selectDown ?? set.normal;\n      default:\n        return set.normal;\n    }\n  }\n}\n/**\n * ボタンの状態に応じて表示されるDisplayObjectを格納するクラス。\n */\nclass ButtonMaterialSet extends ButtonOptionSet {\n  /**\n   * ボタン上に状態パーツを配置する\n   * @param {BasicClickButton} button\n   * @param {ButtonMaterialSet} material\n   */\n  static addChild(button, material) {\n    this.remove(material);\n    const materials = this.getMaterialArray(material);\n    for (let mat of materials) {\n      if (mat != null) button.addChild(mat);\n    }\n  }\n  /**\n   * この状態セットに含まれるパーツを表示ツリー上から削除する。\n   * @param {ButtonMaterialSet} material\n   */\n  static remove(material) {\n    const materials = this.getMaterialArray(material);\n    for (let mat of materials) {\n      if (mat && mat.parent) mat.parent.removeChild(mat);\n    }\n  }\n  /**\n   * 全ての表示パーツを配列として取得する。\n   * @param {ButtonMaterialSet} materials\n   * @returns {DisplayObject[]}\n   */\n  static getMaterialArray(materials) {\n    return [materials.normal, materials.over, materials.down, materials.disable, materials.selectNormal, materials.selectOver, materials.selectDown, materials.selectMarker];\n  }\n  /**\n   * 可視状態をstateに合わせて更新する\n   * @param {ButtonMaterialSet} material\n   * @param {BasicButtonState} state\n   */\n  static updateVisible(material, state) {\n    if (material == null) return;\n    this.invisibleAll(material);\n    this.getMaterial(material, state).visible = true;\n    if (material.selectMarker) {\n      material.selectMarker.visible = state === "select" || state === "select_over" || state === "select_down";\n    }\n  }\n  /**\n   * 全てのパーツを不可視にする。\n   * @param {ButtonMaterialSet} material\n   */\n  static invisibleAll(material) {\n    const materials = this.getMaterialArray(material);\n    for (let mat of materials) {\n      if (mat != null) mat.visible = false;\n    }\n  }\n}\n/**\n * テキストラベルの色についてのオプション。\n * 各ボタンのaddLabel関数でインスタンスに渡す。\n */\nclass ButtonLabelColorSet extends ButtonOptionSet {\n  /**\n   * ラベル文字色をボタン状態に応じて更新する。\n   * @param {Text} field 更新対象ラベル\n   * @param {ButtonLabelColorSet} colors 状態文字色セット\n   * @param {BasicButtonState} state ボタン状態\n   */\n  static update(field, colors, state) {\n    if (field == null) return;\n    field.style.fill = this.getMaterial(colors, state);\n  }\n}\n;// CONCATENATED MODULE: ./esm/SelectionState.js\n\nclass SelectionState extends lib/* EventEmitter */.bkB {\n  constructor(isSelected = false) {\n    super();\n    this.isSelected = false;\n    this.isSelected = isSelected;\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo.js\n\n\n\n/**\n * DOMContentLoaded後の初期化処理。\n * デモに必要なパーツを一式初期化する。\n */\nconst onDomContentsLoaded = async () => {\n  const app = new lib/* Application */.lgM();\n  await app.init({\n    width: 800,\n    height: 600\n  });\n  document.body.appendChild(app.canvas);\n  (0,lib/* sayHello */.eEW)(app.renderer.name);\n  initButton(app.stage);\n  initCheckButton(app.stage);\n  initRadioButton(app.stage);\n  initRadioMarkerButton(app.stage);\n};\nconst initButton = stage => {\n  const button = new BasicClickButton(getMaterialSet());\n  button.x = button.y = 36;\n  const index = addLabel(button);\n  button.setLabel(index, "Abcあ");\n  stage.addChild(button);\n};\nconst initCheckButton = stage => {\n  const buttonSelect = new BasicCheckButton(getMaterialSet());\n  buttonSelect.y = 36;\n  buttonSelect.x = 36 + 128 + 36;\n  addLabel(buttonSelect);\n  buttonSelect.buttonValue = "__button__val__test";\n  stage.addChild(buttonSelect);\n  buttonSelect.on("selected", e => {\n    console.log(e);\n  });\n};\nconst initRadioButton = stage => {\n  const manager = new BasicRadioButtonManager();\n  const n = 4;\n  for (let i = 0; i < n; i++) {\n    const buttonRadio = new BasicRadioButton(getMaterialSet());\n    buttonRadio.y = 128;\n    buttonRadio.x = 36 + (128 + 36) * i;\n    addLabel(buttonRadio);\n    buttonRadio.buttonValue = "__button__val__test__" + i;\n    stage.addChild(buttonRadio);\n    manager.add(buttonRadio);\n  }\n  manager.selected = manager.buttons[0];\n  manager.on("selected", e => {\n    console.log(e);\n  });\n};\nconst initRadioMarkerButton = stage => {\n  const manager = new BasicRadioButtonManager();\n  const n = 4;\n  for (let i = 0; i < n; i++) {\n    const buttonRadio = new BasicRadioButton(getMaterialSet(true));\n    buttonRadio.y = 196;\n    buttonRadio.x = 36 + (128 + 36) * i;\n    addLabel(buttonRadio);\n    buttonRadio.buttonValue = "__button__val__test__" + i;\n    stage.addChild(buttonRadio);\n    manager.add(buttonRadio);\n  }\n  manager.selected = manager.buttons[0];\n  manager.on("selected", e => {\n    console.log(e);\n  });\n};\nconst getMaterialSet = (hasMarker = false) => {\n  const mat = {\n    normal: getRect(0xff00ff),\n    over: getRect(0xff66ff),\n    down: getRect(0xffffff),\n    selectNormal: getRect(0x330033),\n    selectOver: getRect(0x442244),\n    selectDown: getRect(0x333333)\n  };\n  if (hasMarker) {\n    mat.selectMarker = getMarker();\n  }\n  return mat;\n};\nconst getRect = color => {\n  return new lib/* Graphics */.A1g().rect(0, 0, 128, 32).fill(color);\n};\nconst addLabel = btn => {\n  return btn.addLabel(0, 0, "Abcdefghijklあ", {\n    fontSize: 16\n  }, {\n    normal: 0xffffff,\n    over: 0xff00ff,\n    down: 0x000000,\n    selectNormal: 0xffff33,\n    selectOver: 0x00ff00,\n    selectDown: 0x999999\n  });\n};\nconst getMarker = () => {\n  return new lib/* Graphics */.A1g().circle(0, 0, 8).fill(0xff0000);\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3917\n')}},__webpack_module_cache__={},deferred,inProgress,dataWebpackPrefix;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,F,U)=>{if(!B){var g=1/0;for(s=0;s<deferred.length;s++){for(var[B,F,U]=deferred[s],I=!0,C=0;C<B.length;C++)(!1&U||g>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[C])))?B.splice(C--,1):(I=!1,U<g&&(g=U));if(I){deferred.splice(s--,1);var t=F();void 0!==t&&(Q=t)}}return Q}U=U||0;for(var s=deferred.length;s>0&&deferred[s-1][2]>U;s--)deferred[s]=deferred[s-1];deferred[s]=[B,F,U]},__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.f={},__webpack_require__.e=Q=>Promise.all(Object.keys(__webpack_require__.f).reduce(((B,F)=>(__webpack_require__.f[F](Q,B),B)),[])),__webpack_require__.u=Q=>Q+".js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),inProgress={},dataWebpackPrefix="@masatomakino/pixijs-basic-button:",__webpack_require__.l=(Q,B,F,U)=>{if(inProgress[Q])inProgress[Q].push(B);else{var g,I;if(void 0!==F)for(var C=document.getElementsByTagName("script"),t=0;t<C.length;t++){var s=C[t];if(s.getAttribute("src")==Q||s.getAttribute("data-webpack")==dataWebpackPrefix+F){g=s;break}}g||(I=!0,(g=document.createElement("script")).charset="utf-8",g.timeout=120,__webpack_require__.nc&&g.setAttribute("nonce",__webpack_require__.nc),g.setAttribute("data-webpack",dataWebpackPrefix+F),g.src=Q),inProgress[Q]=[B];var l=(B,F)=>{g.onerror=g.onload=null,clearTimeout(i);var U=inProgress[Q];if(delete inProgress[Q],g.parentNode&&g.parentNode.removeChild(g),U&&U.forEach((Q=>Q(F))),B)return B(F)},i=setTimeout(l.bind(null,void 0,{type:"timeout",target:g}),12e4);g.onerror=l.bind(null,g.onerror),g.onload=l.bind(null,g.onload),I&&document.head.appendChild(g)}},__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var B=__webpack_require__.g.document;if(!Q&&B&&(B.currentScript&&"SCRIPT"===B.currentScript.tagName.toUpperCase()&&(Q=B.currentScript.src),!Q)){var F=B.getElementsByTagName("script");if(F.length)for(var U=F.length-1;U>-1&&(!Q||!/^http(s?):/.test(Q));)Q=F[U--].src}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),(()=>{var Q={594:0};__webpack_require__.f.j=(B,F)=>{var U=__webpack_require__.o(Q,B)?Q[B]:void 0;if(0!==U)if(U)F.push(U[2]);else{var g=new Promise(((F,g)=>U=Q[B]=[F,g]));F.push(U[2]=g);var I=__webpack_require__.p+__webpack_require__.u(B),C=new Error;__webpack_require__.l(I,(F=>{if(__webpack_require__.o(Q,B)&&(0!==(U=Q[B])&&(Q[B]=void 0),U)){var g=F&&("load"===F.type?"missing":F.type),I=F&&F.target&&F.target.src;C.message="Loading chunk "+B+" failed.\n("+g+": "+I+")",C.name="ChunkLoadError",C.type=g,C.request=I,U[1](C)}}),"chunk-"+B,B)}},__webpack_require__.O.j=B=>0===Q[B];var B=(B,F)=>{var U,g,[I,C,t]=F,s=0;if(I.some((B=>0!==Q[B]))){for(U in C)__webpack_require__.o(C,U)&&(__webpack_require__.m[U]=C[U]);if(t)var l=t(__webpack_require__)}for(B&&B(F);s<I.length;s++)g=I[s],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_pixijs_basic_button=self.webpackChunk_masatomakino_pixijs_basic_button||[];F.forEach(B.bind(null,0)),F.push=B.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[121],(()=>__webpack_require__(3917)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();