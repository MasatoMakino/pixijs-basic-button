(()=>{"use strict";var __webpack_modules__={753:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 308 modules\nvar lib = __webpack_require__(653);\n;// CONCATENATED MODULE: ./esm/ButtonMaterialSet.js\nclass ButtonOptionSet {\n  /**\n   * stateに対応するオプション値を取り出す\n   * @param set\n   * @param state\n   */\n  static getMaterial(set, state) {\n    switch (state) {\n      case "disable":\n        return set.disable ?? set.normal;\n      case "normal_over":\n        return set.over ?? set.normal;\n      case "normal_down":\n        return set.down ?? set.normal;\n      case "select":\n        return set.selectNormal ?? set.normal;\n      case "select_over":\n        return set.selectOver ?? set.normal;\n      case "select_down":\n        return set.selectDown ?? set.normal;\n      default:\n        return set.normal;\n    }\n  }\n}\n/**\n * ボタンの状態に応じて表示されるDisplayObjectを格納するクラス。\n */\nclass ButtonMaterialSet extends ButtonOptionSet {\n  /**\n   * ボタン上に状態パーツを配置する\n   * @param {BasicClickButton} button\n   * @param {ButtonMaterialSet} material\n   */\n  static addChild(button, material) {\n    this.remove(material);\n    const materials = this.getMaterialArray(material);\n    for (let mat of materials) {\n      if (mat != null) button.addChild(mat);\n    }\n  }\n  /**\n   * この状態セットに含まれるパーツを表示ツリー上から削除する。\n   * @param {ButtonMaterialSet} material\n   */\n  static remove(material) {\n    const materials = this.getMaterialArray(material);\n    for (let mat of materials) {\n      if (mat && mat.parent) mat.parent.removeChild(mat);\n    }\n  }\n  /**\n   * 全ての表示パーツを配列として取得する。\n   * @param {ButtonMaterialSet} materials\n   * @returns {DisplayObject[]}\n   */\n  static getMaterialArray(materials) {\n    return [materials.normal, materials.over, materials.down, materials.disable, materials.selectNormal, materials.selectOver, materials.selectDown, materials.selectMarker];\n  }\n  /**\n   * 可視状態をstateに合わせて更新する\n   * @param {ButtonMaterialSet} material\n   * @param {BasicButtonState} state\n   */\n  static updateVisible(material, state) {\n    this.invisibleAll(material);\n    this.getMaterial(material, state).visible = true;\n    if (material.selectMarker) {\n      material.selectMarker.visible = state === "select" || state === "select_over" || state === "select_down";\n    }\n  }\n  /**\n   * 全てのパーツを不可視にする。\n   * @param {ButtonMaterialSet} material\n   */\n  static invisibleAll(material) {\n    const materials = this.getMaterialArray(material);\n    for (let mat of materials) {\n      if (mat != null) mat.visible = false;\n    }\n  }\n}\n/**\n * テキストラベルの色についてのオプション。\n * 各ボタンのaddLabel関数でインスタンスに渡す。\n */\nclass ButtonLabelColorSet extends ButtonOptionSet {\n  /**\n   * ラベル文字色をボタン状態に応じて更新する。\n   * @param {Text} field 更新対象ラベル\n   * @param {ButtonLabelColorSet} colors 状態文字色セット\n   * @param {BasicButtonState} state ボタン状態\n   */\n  static update(field, colors, state) {\n    if (field == null) return;\n    field.style.fill = this.getMaterial(colors, state);\n    if (field.cacheAsBitmap) {\n      field.cacheAsBitmap = false;\n      field.cacheAsBitmap = true;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicClickButton.js\n\n\n/**\n * 基本ボタンクラス。\n * 選択状態を持たず、クリックした時点で結果が反映されるタイプのボタンです。\n *\n * 正常動作のために、stageにenableMouseOverを実行する必要があります。\n * stageのインスタンス化のタイミングで実行してください。\n *  stage.enableMouseOver();\n */\nclass BasicClickButton extends lib/* Container */.W20 {\n  /**\n   * コンストラクタ\n   * @param {ButtonMaterialSet} materials 状態セット\n   */\n  constructor(materials) {\n    super();\n    this.isDisable = false; //ボタンが使用不可状態か否か\n    this.isPressed = false; //ボタンが押されているか否か\n    this.isOver = false; //マウスオーバーしているか否か\n    /**\n     * ボタンの凍結状態。\n     * trueに設定すると、ボタンの状態と外見を維持したまま、マウス操作を無視する。\n     */\n    this._frozen = false;\n    this._buttonValue = null; //このボタンに割り当てられた値\n    /*ボタンラベル*/\n    this._labelField = []; //ラベル表示用のテキストフィールド\n    this.labelColors = []; //ラベルの色のセット。各状態のラベルの文字色を格納する。\n    this.interactive = true;\n    this.cursor = "pointer";\n    this.setMouseEvents();\n    if (materials) this.initMaterial(materials);\n  }\n  /**\n   * ボタンに対するマウスハンドリングを開始する。\n   */\n  setMouseEvents() {\n    this.on("pointerdown", e => {\n      this.pressButton(e);\n    });\n    this.on("pointerup", e => {\n      this.releaseButton(e);\n    });\n    this.on("pointerover", e => {\n      this.overButton(e);\n    });\n    this.on("pointerout", e => {\n      this.outButton(e);\n    });\n  }\n  /**\n   * ボタンに状態マテリアルを設定する。\n   * @param materials\n   */\n  initMaterial(materials) {\n    //すでにmaterialが設定済みの場合、以前のマテリアルを削除する。\n    if (this.material) {\n      ButtonMaterialSet.remove(this.material);\n      this.material = null;\n    }\n    this.material = materials;\n    ButtonMaterialSet.addChild(this, materials);\n    this.updateMaterialVisible(this.getButtonState());\n    //テキストラベルがあったら最前線に。\n    this._labelField.forEach(label => {\n      this.removeChild(label);\n      this.addChild(label);\n    });\n  }\n  /**\n   * 状態表示およびラベル文字色を、状態に応じて更新する。\n   * @param state\n   */\n  updateMaterialVisible(state) {\n    ButtonMaterialSet.updateVisible(this.material, state);\n    this._labelField.forEach((label, index) => {\n      ButtonLabelColorSet.update(label, this.labelColors[index], state);\n    });\n  }\n  /**\n   * ボタン上でマウスダウンした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  pressButton(evt) {\n    if (!this.checkActivity()) return;\n    this.isPressed = true;\n    this.updateMaterialVisible("normal_down");\n  }\n  /**\n   * ボタン上でマウスアップした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  releaseButton(evt) {\n    if (!this.checkActivity()) return;\n    if (!this.isPressed) return;\n    this.isPressed = false;\n    this.updateMaterialVisible(this.isOver ? "normal_over" : "normal");\n  }\n  /**\n   * ボタンにマウスオーバーした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  overButton(evt) {\n    this.isOver = true;\n    if (!this.checkActivity()) return;\n    this.updateMaterialVisible("normal_over");\n  }\n  /**\n   * ボタンからマウスアウトした際の処理。\n   * 状態と表示を更新する。\n   * @param evt\n   */\n  outButton(evt) {\n    this.isOver = false;\n    this.isPressed = false;\n    if (!this.checkActivity()) return;\n    this.updateMaterialVisible("normal");\n  }\n  /**\n   * ボタンを非活性化する\n   */\n  disableButton() {\n    this.isDisable = true;\n    this.updateMouseEnabled();\n    this.updateMaterialVisible("disable");\n  }\n  /**\n   * ボタンを活性化する\n   */\n  enableButton() {\n    this.isDisable = false;\n    this.updateMouseEnabled();\n    this.updateMaterialVisible("normal");\n  }\n  get frozen() {\n    return this._frozen;\n  }\n  set frozen(value) {\n    this._frozen = value;\n    this.updateMouseEnabled();\n  }\n  updateMouseEnabled() {\n    this.interactive = !this.isDisable && !this._frozen;\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    return !this.isDisable && !this._frozen && this.interactive;\n  }\n  /**\n   * 現在のボタンの状態を取得する\n   * @returns {BasicButtonState}\n   */\n  getButtonState() {\n    if (this.isDisable) return "disable";else return "normal";\n  }\n  /**\n   * ボタンラベルを追加する。\n   * @param x ラベル位置\n   * @param y ラベル位置\n   * @param label ラベルに表示する文言\n   * @param style\n   * @param color\n   * @return テキストフィールドのインデックス値\n   */\n  addLabel(x, y, label, style, color) {\n    this.labelColors.push(color);\n    style.fill = color.normal;\n    style.textBaseline = "ideographic";\n    const field = new lib/* Text */.xvT(label, style);\n    this._labelField.push(field);\n    field.x = x;\n    field.y = y;\n    field.cacheAsBitmap = true;\n    field.interactive = field.interactiveChildren = false;\n    this.addChild(field);\n    return this._labelField.indexOf(field);\n  }\n  /**\n   * ボタンラベルに表示されている文言を取得する。\n   * @returns {string}\n   */\n  getLabel(index) {\n    if (!this._labelField) return null;\n    return this._labelField[index].text;\n  }\n  /**\n   * ボタンラベルの文言を更新する。\n   * @param index\n   * @param value\n   */\n  setLabel(index, value) {\n    if (this._labelField.length === 0) {\n      console.warn("BasicButton : " + "ボタンラベルが初期化されていませんが、ラベルの文言が指定されました。" + "文言を指定する前にラベルの初期化をaddLabel関数で行ってください。");\n      return;\n    }\n    if (this._labelField[index] === undefined) {\n      console.warn("BasicButton : " + `指定されたindex : ${index}にラベルが存在しません。`);\n      return;\n    }\n    const field = this._labelField[index];\n    if (field.text === value) return;\n    field.text = value;\n  }\n  getLabelField(index) {\n    return this._labelField[index];\n  }\n  get buttonValue() {\n    return this._buttonValue;\n  }\n  set buttonValue(value) {\n    if (this._buttonValue != value) {\n      this._buttonValue = value;\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@pixi/utils/lib/index.mjs + 25 modules\nvar utils_lib = __webpack_require__(359);\n;// CONCATENATED MODULE: ./esm/SelectionState.js\n\nclass SelectionState extends utils_lib.EventEmitter {\n  constructor(isSelected = false) {\n    super();\n    this.isSelected = false;\n    this.isSelected = isSelected;\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicButtonContext.js\nclass BasicButtonContext {\n  constructor(target, value) {\n    this.buttonValue = null;\n    this.target = target;\n    this.buttonValue = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicCheckButton.js\n\n\n\n/**\n * 選択状態を持つボタンクラス。\n */\nclass BasicCheckButton extends BasicClickButton {\n  get selectionState() {\n    return this._selectionState;\n  }\n  constructor(materials) {\n    super(materials);\n    this._selectionState = new SelectionState();\n  }\n  pressButton(evt) {\n    if (!this.checkActivity()) return;\n    this.isPressed = true;\n    this.updateMaterialVisible(this._selectionState.isSelected ? "select_down" : "normal_down");\n  }\n  releaseButton(evt) {\n    if (!this.checkActivity()) return;\n    if (!this.isPressed) return;\n    this.isPressed = false;\n    if (this._selectionState.isSelected) this.deselectButton(evt);else this.selectButton(evt);\n  }\n  overButton(evt) {\n    super.overButton(evt);\n    if (!this.checkActivity()) return;\n    this.updateMaterialVisible(this._selectionState.isSelected ? "select_over" : "normal_over");\n  }\n  outButton(evt) {\n    super.outButton(evt);\n    if (!this.isDisable) {\n      this.updateMaterialVisible(this._selectionState.isSelected ? "select" : "normal");\n    }\n    if (!this.checkActivity()) return;\n  }\n  /**\n   * ボタンを選択する。\n   * @param evt\n   */\n  selectButton(evt) {\n    if (this._selectionState.isSelected) return;\n    this._selectionState.isSelected = true;\n    if (!this.isDisable) {\n      this.updateMaterialVisible(this.isOver ? "select_over" : "select");\n    }\n    const buttonEvt = new BasicButtonContext(this, this.buttonValue);\n    this._selectionState.emit("selected", buttonEvt);\n  }\n  /**\n   * ボタンの選択を解除する。\n   * @param evt\n   */\n  deselectButton(evt) {\n    if (!this._selectionState.isSelected) return;\n    if (!this.isDisable) {\n      this.updateMaterialVisible(this.isOver ? "normal_over" : "normal");\n    }\n    this._selectionState.isSelected = false;\n    const buttonEvt = new BasicButtonContext(this, this.buttonValue);\n    this._selectionState.emit("unselected", buttonEvt);\n  }\n  enableButton() {\n    super.enableButton();\n    this.updateMaterialVisible(this._selectionState.isSelected ? "select" : "normal");\n  }\n  getButtonState() {\n    if (this.isDisable) return "disable";else {\n      if (this._selectionState?.isSelected) return "select";else return "normal";\n    }\n  }\n  /**\n   * 選択状態を取得する。\n   * @returns {boolean}\n   */\n  get selection() {\n    return this.selectionState.isSelected;\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicRadioButton.js\n\n\n/**\n * 排他的に選択可能なボタン。ラジオボタンのセットはBasicRadioButtonManagerで設定する。\n */\nclass BasicRadioButton extends BasicCheckButton {\n  constructor(materials) {\n    super(materials);\n    this._selectionState.on("selected", () => {\n      this.cursor = "auto";\n    });\n    this._selectionState.on("unselected", () => {\n      this.cursor = "pointer";\n    });\n  }\n  /**\n   * ボタンを選択する。\n   * @param evt\n   */\n  selectButton(evt) {\n    if (this._selectionState.isSelected) return;\n    this._selectionState.isSelected = true;\n    if (!this.isDisable) {\n      //ラジオボタンは選択した時点で操作不可となる。そのためSELECT_OVERには遷移しない。\n      this.updateMaterialVisible("select");\n    }\n    const buttonEvt = new BasicButtonContext(this, this.buttonValue);\n    this._selectionState.emit("selected", buttonEvt);\n  }\n  /**\n   * 現在のボタンの有効、無効状態を取得する。\n   * ラジオボタンは選択中も操作が無効となる。\n   * @return    ボタンが有効か否か\n   */\n  checkActivity() {\n    if (this._selectionState.isSelected) return false;\n    return super.checkActivity();\n  }\n}\n;// CONCATENATED MODULE: ./esm/BasicRadioButtonManager.js\n\n\n/**\n * 排他的に選択されるボタンを制御するクラスです。\n *\n * メンバーのBasicRadioButtonが変更されると、このクラスに変更内容が通知されます。\n * このクラスは変更通知に応じ、他のBasicRadioButtonオブジェクトの選択状態を変更します。\n * また、このクラスは変更内容をEventとして発信します。\n *\n * 利用する際には以下のような手順でインスタンス化してください。\n *\n * let btn:BasicRadioButton = new BasicRadioButton(...);\n * let manager:BasicRadioButtonManager = new BasicRadioButtonManager(); //インスタンス化\n * manager.addButton(btn);\n * manager.selected = btn; //デフォルトで選択されているボタンを指定\n */\nclass BasicRadioButtonManager extends utils_lib.EventEmitter {\n  constructor() {\n    super(...arguments);\n    this._buttons = [];\n    this._selected = null;\n  }\n  /**\n   * ラジオボタンのグループにボタンを追加する。\n   * @param {BasicRadioButton} button\n   */\n  add(button) {\n    this._buttons.push(button);\n    button.selectionState.on("selected", e => {\n      const ctx = e;\n      this.deselectOthers(ctx.target);\n    });\n  }\n  /**\n   * ボタンを選択する。\n   * nullを引数に取ると全ての選択を解除する。\n   * @param {BasicRadioButton} selectedButton\n   */\n  set selected(selectedButton) {\n    this._selected = selectedButton;\n    if (selectedButton == null) {\n      this.deselectAllButtons();\n      return;\n    }\n    //選択されたボタンがこのインスタンスの管理下か確認する。\n    const index = this._buttons.indexOf(selectedButton);\n    if (index === -1) {\n      console.warn("BasicRadioButtonManager : " + "選択対象として指定されたボタンが、BasicRadioButtonManagerの管理下にありません。" + "指定を行う前にaddButton関数でボタンをBasicRadioButtonManagerに登録してください。");\n      return;\n    }\n    selectedButton.selectButton();\n  }\n  /**\n   * 選択済みのボタンを取得する。\n   * 選択されていない場合はnullを返す。\n   * @returns {BasicRadioButton | null}\n   */\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * 指定されたボタン以外の選択を解除し、BasicRadioButtonManagerからSELECTEDイベントを発行する。\n   * @param {BasicRadioButton} selectedButton\n   * @param {boolean} isDispatchSelectEvent\n   */\n  deselectOthers(selectedButton, isDispatchSelectEvent = true) {\n    this._selected = selectedButton;\n    for (let btn of this._buttons) {\n      if (btn != selectedButton) {\n        btn.deselectButton();\n      }\n    }\n    if (isDispatchSelectEvent) {\n      const evt = new BasicButtonContext(this._selected, this._selected.buttonValue);\n      evt.index = this._buttons.indexOf(this._selected);\n      this.emit("selected", evt);\n    }\n  }\n  /**\n   * 管理下の全てのボタンの選択を解除する。\n   */\n  deselectAllButtons() {\n    this._selected = null;\n    for (let btn of this._buttons) {\n      btn.deselectButton();\n    }\n    const evt = new BasicButtonContext(null, null);\n    this.emit("unselected", evt);\n  }\n  disableAll() {\n    for (let btn of this._buttons) {\n      btn.disableButton();\n    }\n  }\n  disableMouseAll() {\n    for (let btn of this._buttons) {\n      btn.interactive = false;\n    }\n  }\n  enableAll() {\n    for (let btn of this._buttons) {\n      btn.enableButton();\n    }\n  }\n  enableMouseAll() {\n    for (let btn of this._buttons) {\n      btn.interactive = true;\n    }\n  }\n  /**\n   * 現在選択されているボタンのbuttonValueを取得する。\n   * 選択されたボタンがない場合はnullを返す。\n   * @returns {any}\n   */\n  get selectedButtonValue() {\n    const btn = this.selected;\n    if (btn) {\n      return btn.buttonValue;\n    }\n    return null;\n  }\n  /**\n   * このインスタンスで管理をしているラジオボタンの配列を取得する。\n   * @returns {BasicRadioButton[]}\n   */\n  get buttons() {\n    return this._buttons;\n  }\n  /**\n   * buttonValueを検索キーとして、該当するボタンを取得する。\n   * 該当するボタンがない場合はnullを返す。\n   *\n   * @param value\n   * @returns {BasicRadioButton | null}\n   */\n  getButton(value) {\n    for (let btn of this._buttons) {\n      if (btn.buttonValue === value && btn.buttonValue != null) {\n        return btn;\n      }\n    }\n    return null;\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo.js\n\n\n\n/**\n * DOMContentLoaded後の初期化処理。\n * デモに必要なパーツを一式初期化する。\n */\nconst onDomContentsLoaded = () => {\n  const app = new lib/* Application */.MxU({\n    width: 800,\n    height: 600\n  });\n  document.body.appendChild(app.view);\n  initButton(app.stage);\n  initCheckButton(app.stage);\n  initRadioButton(app.stage);\n  initRadioMarkerButton(app.stage);\n};\nconst initButton = stage => {\n  const button = new BasicClickButton(getMaterialSet());\n  button.x = button.y = 36;\n  const index = addLabel(button);\n  button.setLabel(index, "Abcあ");\n  stage.addChild(button);\n};\nconst initCheckButton = stage => {\n  const buttonSelect = new BasicCheckButton(getMaterialSet());\n  buttonSelect.y = 36;\n  buttonSelect.x = 36 + 128 + 36;\n  addLabel(buttonSelect);\n  buttonSelect.buttonValue = "__button__val__test";\n  stage.addChild(buttonSelect);\n  buttonSelect.on("selected", e => {\n    console.log(e);\n  });\n};\nconst initRadioButton = stage => {\n  const manager = new BasicRadioButtonManager();\n  const n = 4;\n  for (let i = 0; i < n; i++) {\n    const buttonRadio = new BasicRadioButton(getMaterialSet());\n    buttonRadio.y = 128;\n    buttonRadio.x = 36 + (128 + 36) * i;\n    addLabel(buttonRadio);\n    buttonRadio.buttonValue = "__button__val__test__" + i;\n    stage.addChild(buttonRadio);\n    manager.add(buttonRadio);\n  }\n  manager.selected = manager.buttons[0];\n  manager.on("selected", e => {\n    console.log(e);\n  });\n};\nconst initRadioMarkerButton = stage => {\n  const manager = new BasicRadioButtonManager();\n  const n = 4;\n  for (let i = 0; i < n; i++) {\n    const buttonRadio = new BasicRadioButton(getMaterialSet(true));\n    buttonRadio.y = 196;\n    buttonRadio.x = 36 + (128 + 36) * i;\n    addLabel(buttonRadio);\n    buttonRadio.buttonValue = "__button__val__test__" + i;\n    stage.addChild(buttonRadio);\n    manager.add(buttonRadio);\n  }\n  manager.selected = manager.buttons[0];\n  manager.on("selected", e => {\n    console.log(e);\n  });\n};\nconst getMaterialSet = (hasMarker = false) => {\n  const mat = {\n    normal: getRect(0xff00ff),\n    over: getRect(0xff66ff),\n    down: getRect(0xffffff),\n    selectNormal: getRect(0x330033),\n    selectOver: getRect(0x442244),\n    selectDown: getRect(0x333333)\n  };\n  if (hasMarker) {\n    console.log(hasMarker);\n    mat.selectMarker = getMarker();\n  }\n  return mat;\n};\nconst getRect = color => {\n  const gra = new lib/* Graphics */.TCu();\n  gra.beginFill(color).drawRect(0, 0, 128, 32).endFill();\n  return gra;\n};\nconst addLabel = btn => {\n  return btn.addLabel(0, 0, "Abcdefghijklあ", {\n    fontSize: 16\n  }, {\n    normal: 0xffffff,\n    over: 0xff00ff,\n    down: 0x000000,\n    selectNormal: 0xffff33,\n    selectOver: 0x00ff00,\n    selectDown: 0x999999\n  });\n};\nconst getMarker = () => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(0xff0000).drawCircle(0, 0, 8).endFill();\n  return g;\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxFQUFFO0VBQ25ELE9BQU9FLENBQUM7QUFDVixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLElBQUl4QixRQUFRLENBQUMwQixVQUFVLEtBQUssU0FBUyxFQUFFO0VBQ3JDOUIsbUJBQW1CLEVBQUU7QUFDdkIsQ0FBQyxNQUFNO0VBQ0xJLFFBQVEsQ0FBQzJCLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFL0IsbUJBQW1CLENBQUM7QUFDcEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1idXR0b24vLi9lc20vQnV0dG9uTWF0ZXJpYWxTZXQuanM/NzA4MiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1idXR0b24vLi9lc20vQmFzaWNDbGlja0J1dHRvbi5qcz82M2YyIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLWJ1dHRvbi8uL2VzbS9TZWxlY3Rpb25TdGF0ZS5qcz80MmVhIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLWJ1dHRvbi8uL2VzbS9CYXNpY0J1dHRvbkNvbnRleHQuanM/NDBjNCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1idXR0b24vLi9lc20vQmFzaWNDaGVja0J1dHRvbi5qcz82OGM0Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLWJ1dHRvbi8uL2VzbS9CYXNpY1JhZGlvQnV0dG9uLmpzPzkzOTUiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtYnV0dG9uLy4vZXNtL0Jhc2ljUmFkaW9CdXR0b25NYW5hZ2VyLmpzPzcyMGYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtYnV0dG9uLy4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtYnV0dG9uLy4vZGVtb1NyYy9kZW1vLmpzPzM5OTYiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQnV0dG9uT3B0aW9uU2V0IHtcbiAgICAvKipcbiAgICAgKiBzdGF0ZeOBq+WvvuW/nOOBmeOCi+OCquODl+OCt+ODp+ODs+WApOOCkuWPluOCiuWHuuOBmVxuICAgICAqIEBwYXJhbSBzZXRcbiAgICAgKiBAcGFyYW0gc3RhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0TWF0ZXJpYWwoc2V0LCBzdGF0ZSkge1xuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZGlzYWJsZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBzZXQuZGlzYWJsZSA/PyBzZXQubm9ybWFsO1xuICAgICAgICAgICAgY2FzZSBcIm5vcm1hbF9vdmVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldC5vdmVyID8/IHNldC5ub3JtYWw7XG4gICAgICAgICAgICBjYXNlIFwibm9ybWFsX2Rvd25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0LmRvd24gPz8gc2V0Lm5vcm1hbDtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0LnNlbGVjdE5vcm1hbCA/PyBzZXQubm9ybWFsO1xuICAgICAgICAgICAgY2FzZSBcInNlbGVjdF9vdmVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldC5zZWxlY3RPdmVyID8/IHNldC5ub3JtYWw7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0X2Rvd25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0LnNlbGVjdERvd24gPz8gc2V0Lm5vcm1hbDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldC5ub3JtYWw7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIOODnOOCv+ODs+OBrueKtuaFi+OBq+W/nOOBmOOBpuihqOekuuOBleOCjOOCi0Rpc3BsYXlPYmplY3TjgpLmoLzntI3jgZnjgovjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEJ1dHRvbk1hdGVyaWFsU2V0IGV4dGVuZHMgQnV0dG9uT3B0aW9uU2V0IHtcbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7PkuIrjgavnirbmhYvjg5Hjg7zjg4TjgpLphY3nva7jgZnjgotcbiAgICAgKiBAcGFyYW0ge0Jhc2ljQ2xpY2tCdXR0b259IGJ1dHRvblxuICAgICAqIEBwYXJhbSB7QnV0dG9uTWF0ZXJpYWxTZXR9IG1hdGVyaWFsXG4gICAgICovXG4gICAgc3RhdGljIGFkZENoaWxkKGJ1dHRvbiwgbWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUobWF0ZXJpYWwpO1xuICAgICAgICBjb25zdCBtYXRlcmlhbHMgPSB0aGlzLmdldE1hdGVyaWFsQXJyYXkobWF0ZXJpYWwpO1xuICAgICAgICBmb3IgKGxldCBtYXQgb2YgbWF0ZXJpYWxzKSB7XG4gICAgICAgICAgICBpZiAobWF0ICE9IG51bGwpXG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZENoaWxkKG1hdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44GT44Gu54q25oWL44K744OD44OI44Gr5ZCr44G+44KM44KL44OR44O844OE44KS6KGo56S644OE44Oq44O85LiK44GL44KJ5YmK6Zmk44GZ44KL44CCXG4gICAgICogQHBhcmFtIHtCdXR0b25NYXRlcmlhbFNldH0gbWF0ZXJpYWxcbiAgICAgKi9cbiAgICBzdGF0aWMgcmVtb3ZlKG1hdGVyaWFsKSB7XG4gICAgICAgIGNvbnN0IG1hdGVyaWFscyA9IHRoaXMuZ2V0TWF0ZXJpYWxBcnJheShtYXRlcmlhbCk7XG4gICAgICAgIGZvciAobGV0IG1hdCBvZiBtYXRlcmlhbHMpIHtcbiAgICAgICAgICAgIGlmIChtYXQgJiYgbWF0LnBhcmVudClcbiAgICAgICAgICAgICAgICBtYXQucGFyZW50LnJlbW92ZUNoaWxkKG1hdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog5YWo44Gm44Gu6KGo56S644OR44O844OE44KS6YWN5YiX44Go44GX44Gm5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHBhcmFtIHtCdXR0b25NYXRlcmlhbFNldH0gbWF0ZXJpYWxzXG4gICAgICogQHJldHVybnMge0Rpc3BsYXlPYmplY3RbXX1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0TWF0ZXJpYWxBcnJheShtYXRlcmlhbHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hdGVyaWFscy5ub3JtYWwsXG4gICAgICAgICAgICBtYXRlcmlhbHMub3ZlcixcbiAgICAgICAgICAgIG1hdGVyaWFscy5kb3duLFxuICAgICAgICAgICAgbWF0ZXJpYWxzLmRpc2FibGUsXG4gICAgICAgICAgICBtYXRlcmlhbHMuc2VsZWN0Tm9ybWFsLFxuICAgICAgICAgICAgbWF0ZXJpYWxzLnNlbGVjdE92ZXIsXG4gICAgICAgICAgICBtYXRlcmlhbHMuc2VsZWN0RG93bixcbiAgICAgICAgICAgIG1hdGVyaWFscy5zZWxlY3RNYXJrZXIsXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWPr+imlueKtuaFi+OCknN0YXRl44Gr5ZCI44KP44Gb44Gm5pu05paw44GZ44KLXG4gICAgICogQHBhcmFtIHtCdXR0b25NYXRlcmlhbFNldH0gbWF0ZXJpYWxcbiAgICAgKiBAcGFyYW0ge0Jhc2ljQnV0dG9uU3RhdGV9IHN0YXRlXG4gICAgICovXG4gICAgc3RhdGljIHVwZGF0ZVZpc2libGUobWF0ZXJpYWwsIHN0YXRlKSB7XG4gICAgICAgIHRoaXMuaW52aXNpYmxlQWxsKG1hdGVyaWFsKTtcbiAgICAgICAgdGhpcy5nZXRNYXRlcmlhbChtYXRlcmlhbCwgc3RhdGUpLnZpc2libGUgPSB0cnVlO1xuICAgICAgICBpZiAobWF0ZXJpYWwuc2VsZWN0TWFya2VyKSB7XG4gICAgICAgICAgICBtYXRlcmlhbC5zZWxlY3RNYXJrZXIudmlzaWJsZSA9XG4gICAgICAgICAgICAgICAgc3RhdGUgPT09IFwic2VsZWN0XCIgfHxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPT09IFwic2VsZWN0X292ZXJcIiB8fFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9PT0gXCJzZWxlY3RfZG93blwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWFqOOBpuOBruODkeODvOODhOOCkuS4jeWPr+imluOBq+OBmeOCi+OAglxuICAgICAqIEBwYXJhbSB7QnV0dG9uTWF0ZXJpYWxTZXR9IG1hdGVyaWFsXG4gICAgICovXG4gICAgc3RhdGljIGludmlzaWJsZUFsbChtYXRlcmlhbCkge1xuICAgICAgICBjb25zdCBtYXRlcmlhbHMgPSB0aGlzLmdldE1hdGVyaWFsQXJyYXkobWF0ZXJpYWwpO1xuICAgICAgICBmb3IgKGxldCBtYXQgb2YgbWF0ZXJpYWxzKSB7XG4gICAgICAgICAgICBpZiAobWF0ICE9IG51bGwpXG4gICAgICAgICAgICAgICAgbWF0LnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICog44OG44Kt44K544OI44Op44OZ44Or44Gu6Imy44Gr44Gk44GE44Gm44Gu44Kq44OX44K344On44Oz44CCXG4gKiDlkITjg5zjgr/jg7Pjga5hZGRMYWJlbOmWouaVsOOBp+OCpOODs+OCueOCv+ODs+OCueOBq+a4oeOBmeOAglxuICovXG5leHBvcnQgY2xhc3MgQnV0dG9uTGFiZWxDb2xvclNldCBleHRlbmRzIEJ1dHRvbk9wdGlvblNldCB7XG4gICAgLyoqXG4gICAgICog44Op44OZ44Or5paH5a2X6Imy44KS44Oc44K/44Oz54q25oWL44Gr5b+c44GY44Gm5pu05paw44GZ44KL44CCXG4gICAgICogQHBhcmFtIHtUZXh0fSBmaWVsZCDmm7TmlrDlr77osaHjg6njg5njg6tcbiAgICAgKiBAcGFyYW0ge0J1dHRvbkxhYmVsQ29sb3JTZXR9IGNvbG9ycyDnirbmhYvmloflrZfoibLjgrvjg4Pjg4hcbiAgICAgKiBAcGFyYW0ge0Jhc2ljQnV0dG9uU3RhdGV9IHN0YXRlIOODnOOCv+ODs+eKtuaFi1xuICAgICAqL1xuICAgIHN0YXRpYyB1cGRhdGUoZmllbGQsIGNvbG9ycywgc3RhdGUpIHtcbiAgICAgICAgaWYgKGZpZWxkID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZpZWxkLnN0eWxlLmZpbGwgPSB0aGlzLmdldE1hdGVyaWFsKGNvbG9ycywgc3RhdGUpO1xuICAgICAgICBpZiAoZmllbGQuY2FjaGVBc0JpdG1hcCkge1xuICAgICAgICAgICAgZmllbGQuY2FjaGVBc0JpdG1hcCA9IGZhbHNlO1xuICAgICAgICAgICAgZmllbGQuY2FjaGVBc0JpdG1hcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb250YWluZXIsIFRleHQgfSBmcm9tIFwicGl4aS5qc1wiO1xuaW1wb3J0IHsgQnV0dG9uTGFiZWxDb2xvclNldCwgQnV0dG9uTWF0ZXJpYWxTZXQgfSBmcm9tIFwiLi9CdXR0b25NYXRlcmlhbFNldFwiO1xuLyoqXG4gKiDln7rmnKzjg5zjgr/jg7Pjgq/jg6njgrnjgIJcbiAqIOmBuOaKnueKtuaFi+OCkuaMgeOBn+OBmuOAgeOCr+ODquODg+OCr+OBl+OBn+aZgueCueOBp+e1kOaenOOBjOWPjeaYoOOBleOCjOOCi+OCv+OCpOODl+OBruODnOOCv+ODs+OBp+OBmeOAglxuICpcbiAqIOato+W4uOWLleS9nOOBruOBn+OCgeOBq+OAgXN0YWdl44GrZW5hYmxlTW91c2VPdmVy44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXG4gKiBzdGFnZeOBruOCpOODs+OCueOCv+ODs+OCueWMluOBruOCv+OCpOODn+ODs+OCsOOBp+Wun+ihjOOBl+OBpuOBj+OBoOOBleOBhOOAglxuICogIHN0YWdlLmVuYWJsZU1vdXNlT3ZlcigpO1xuICovXG5leHBvcnQgY2xhc3MgQmFzaWNDbGlja0J1dHRvbiBleHRlbmRzIENvbnRhaW5lciB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICogQHBhcmFtIHtCdXR0b25NYXRlcmlhbFNldH0gbWF0ZXJpYWxzIOeKtuaFi+OCu+ODg+ODiFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1hdGVyaWFscykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlzRGlzYWJsZSA9IGZhbHNlOyAvL+ODnOOCv+ODs+OBjOS9v+eUqOS4jeWPr+eKtuaFi+OBi+WQpuOBi1xuICAgICAgICB0aGlzLmlzUHJlc3NlZCA9IGZhbHNlOyAvL+ODnOOCv+ODs+OBjOaKvOOBleOCjOOBpuOBhOOCi+OBi+WQpuOBi1xuICAgICAgICB0aGlzLmlzT3ZlciA9IGZhbHNlOyAvL+ODnuOCpuOCueOCquODvOODkOODvOOBl+OBpuOBhOOCi+OBi+WQpuOBi1xuICAgICAgICAvKipcbiAgICAgICAgICog44Oc44K/44Oz44Gu5YeN57WQ54q25oWL44CCXG4gICAgICAgICAqIHRydWXjgavoqK3lrprjgZnjgovjgajjgIHjg5zjgr/jg7Pjga7nirbmhYvjgajlpJbopovjgpLntq3mjIHjgZfjgZ/jgb7jgb7jgIHjg57jgqbjgrnmk43kvZzjgpLnhKHoppbjgZnjgovjgIJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2Zyb3plbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9idXR0b25WYWx1ZSA9IG51bGw7IC8v44GT44Gu44Oc44K/44Oz44Gr5Ymy44KK5b2T44Gm44KJ44KM44Gf5YCkXG4gICAgICAgIC8q44Oc44K/44Oz44Op44OZ44OrKi9cbiAgICAgICAgdGhpcy5fbGFiZWxGaWVsZCA9IFtdOyAvL+ODqeODmeODq+ihqOekuueUqOOBruODhuOCreOCueODiOODleOCo+ODvOODq+ODiVxuICAgICAgICB0aGlzLmxhYmVsQ29sb3JzID0gW107IC8v44Op44OZ44Or44Gu6Imy44Gu44K744OD44OI44CC5ZCE54q25oWL44Gu44Op44OZ44Or44Gu5paH5a2X6Imy44KS5qC857SN44GZ44KL44CCXG4gICAgICAgIHRoaXMuaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB0aGlzLnNldE1vdXNlRXZlbnRzKCk7XG4gICAgICAgIGlmIChtYXRlcmlhbHMpXG4gICAgICAgICAgICB0aGlzLmluaXRNYXRlcmlhbChtYXRlcmlhbHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7Pjgavlr77jgZnjgovjg57jgqbjgrnjg4/jg7Pjg4njg6rjg7PjgrDjgpLplovlp4vjgZnjgovjgIJcbiAgICAgKi9cbiAgICBzZXRNb3VzZUV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5vbihcInBvaW50ZXJkb3duXCIsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByZXNzQnV0dG9uKGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihcInBvaW50ZXJ1cFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWxlYXNlQnV0dG9uKGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbihcInBvaW50ZXJvdmVyXCIsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm92ZXJCdXR0b24oZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwicG9pbnRlcm91dFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vdXRCdXR0b24oZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7PjgavnirbmhYvjg57jg4bjg6rjgqLjg6vjgpLoqK3lrprjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gbWF0ZXJpYWxzXG4gICAgICovXG4gICAgaW5pdE1hdGVyaWFsKG1hdGVyaWFscykge1xuICAgICAgICAvL+OBmeOBp+OBq21hdGVyaWFs44GM6Kit5a6a5riI44G/44Gu5aC05ZCI44CB5Lul5YmN44Gu44Oe44OG44Oq44Ki44Or44KS5YmK6Zmk44GZ44KL44CCXG4gICAgICAgIGlmICh0aGlzLm1hdGVyaWFsKSB7XG4gICAgICAgICAgICBCdXR0b25NYXRlcmlhbFNldC5yZW1vdmUodGhpcy5tYXRlcmlhbCk7XG4gICAgICAgICAgICB0aGlzLm1hdGVyaWFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWxzO1xuICAgICAgICBCdXR0b25NYXRlcmlhbFNldC5hZGRDaGlsZCh0aGlzLCBtYXRlcmlhbHMpO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsVmlzaWJsZSh0aGlzLmdldEJ1dHRvblN0YXRlKCkpO1xuICAgICAgICAvL+ODhuOCreOCueODiOODqeODmeODq+OBjOOBguOBo+OBn+OCieacgOWJjee3muOBq+OAglxuICAgICAgICB0aGlzLl9sYWJlbEZpZWxkLmZvckVhY2goKGxhYmVsKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQobGFiZWwpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog54q25oWL6KGo56S644GK44KI44Gz44Op44OZ44Or5paH5a2X6Imy44KS44CB54q25oWL44Gr5b+c44GY44Gm5pu05paw44GZ44KL44CCXG4gICAgICogQHBhcmFtIHN0YXRlXG4gICAgICovXG4gICAgdXBkYXRlTWF0ZXJpYWxWaXNpYmxlKHN0YXRlKSB7XG4gICAgICAgIEJ1dHRvbk1hdGVyaWFsU2V0LnVwZGF0ZVZpc2libGUodGhpcy5tYXRlcmlhbCwgc3RhdGUpO1xuICAgICAgICB0aGlzLl9sYWJlbEZpZWxkLmZvckVhY2goKGxhYmVsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgQnV0dG9uTGFiZWxDb2xvclNldC51cGRhdGUobGFiZWwsIHRoaXMubGFiZWxDb2xvcnNbaW5kZXhdLCBzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7PkuIrjgafjg57jgqbjgrnjg4Djgqbjg7PjgZfjgZ/pmpvjga7lh6bnkIbjgIJcbiAgICAgKiDnirbmhYvjgajooajnpLrjgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gZXZ0XG4gICAgICovXG4gICAgcHJlc3NCdXR0b24oZXZ0KSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVNYXRlcmlhbFZpc2libGUoXCJub3JtYWxfZG93blwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oc44K/44Oz5LiK44Gn44Oe44Km44K544Ki44OD44OX44GX44Gf6Zqb44Gu5Yem55CG44CCXG4gICAgICog54q25oWL44Go6KGo56S644KS5pu05paw44GZ44KL44CCXG4gICAgICogQHBhcmFtIGV2dFxuICAgICAqL1xuICAgIHJlbGVhc2VCdXR0b24oZXZ0KSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5pc1ByZXNzZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxWaXNpYmxlKHRoaXMuaXNPdmVyID8gXCJub3JtYWxfb3ZlclwiIDogXCJub3JtYWxcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODnOOCv+ODs+OBq+ODnuOCpuOCueOCquODvOODkOODvOOBl+OBn+mam+OBruWHpueQhuOAglxuICAgICAqIOeKtuaFi+OBqOihqOekuuOCkuabtOaWsOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBldnRcbiAgICAgKi9cbiAgICBvdmVyQnV0dG9uKGV2dCkge1xuICAgICAgICB0aGlzLmlzT3ZlciA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxWaXNpYmxlKFwibm9ybWFsX292ZXJcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODnOOCv+ODs+OBi+OCieODnuOCpuOCueOCouOCpuODiOOBl+OBn+mam+OBruWHpueQhuOAglxuICAgICAqIOeKtuaFi+OBqOihqOekuuOCkuabtOaWsOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBldnRcbiAgICAgKi9cbiAgICBvdXRCdXR0b24oZXZ0KSB7XG4gICAgICAgIHRoaXMuaXNPdmVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxWaXNpYmxlKFwibm9ybWFsXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7PjgpLpnZ7mtLvmgKfljJbjgZnjgotcbiAgICAgKi9cbiAgICBkaXNhYmxlQnV0dG9uKCkge1xuICAgICAgICB0aGlzLmlzRGlzYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMudXBkYXRlTW91c2VFbmFibGVkKCk7XG4gICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxWaXNpYmxlKFwiZGlzYWJsZVwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oc44K/44Oz44KS5rS75oCn5YyW44GZ44KLXG4gICAgICovXG4gICAgZW5hYmxlQnV0dG9uKCkge1xuICAgICAgICB0aGlzLmlzRGlzYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnVwZGF0ZU1vdXNlRW5hYmxlZCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsVmlzaWJsZShcIm5vcm1hbFwiKTtcbiAgICB9XG4gICAgZ2V0IGZyb3plbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb3plbjtcbiAgICB9XG4gICAgc2V0IGZyb3plbih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9mcm96ZW4gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVNb3VzZUVuYWJsZWQoKTtcbiAgICB9XG4gICAgdXBkYXRlTW91c2VFbmFibGVkKCkge1xuICAgICAgICB0aGlzLmludGVyYWN0aXZlID0gIXRoaXMuaXNEaXNhYmxlICYmICF0aGlzLl9mcm96ZW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruODnOOCv+ODs+OBruacieWKueOAgeeEoeWKueeKtuaFi+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm4gICAg44Oc44K/44Oz44GM5pyJ5Yq544GL5ZCm44GLXG4gICAgICovXG4gICAgY2hlY2tBY3Rpdml0eSgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRGlzYWJsZSAmJiAhdGhpcy5fZnJvemVuICYmIHRoaXMuaW50ZXJhY3RpdmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruODnOOCv+ODs+OBrueKtuaFi+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEByZXR1cm5zIHtCYXNpY0J1dHRvblN0YXRlfVxuICAgICAqL1xuICAgIGdldEJ1dHRvblN0YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5pc0Rpc2FibGUpXG4gICAgICAgICAgICByZXR1cm4gXCJkaXNhYmxlXCI7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7Pjg6njg5njg6vjgpLov73liqDjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0geCDjg6njg5njg6vkvY3nva5cbiAgICAgKiBAcGFyYW0geSDjg6njg5njg6vkvY3nva5cbiAgICAgKiBAcGFyYW0gbGFiZWwg44Op44OZ44Or44Gr6KGo56S644GZ44KL5paH6KiAXG4gICAgICogQHBhcmFtIHN0eWxlXG4gICAgICogQHBhcmFtIGNvbG9yXG4gICAgICogQHJldHVybiDjg4bjgq3jgrnjg4jjg5XjgqPjg7zjg6vjg4njga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAgKi9cbiAgICBhZGRMYWJlbCh4LCB5LCBsYWJlbCwgc3R5bGUsIGNvbG9yKSB7XG4gICAgICAgIHRoaXMubGFiZWxDb2xvcnMucHVzaChjb2xvcik7XG4gICAgICAgIHN0eWxlLmZpbGwgPSBjb2xvci5ub3JtYWw7XG4gICAgICAgIHN0eWxlLnRleHRCYXNlbGluZSA9IFwiaWRlb2dyYXBoaWNcIjtcbiAgICAgICAgY29uc3QgZmllbGQgPSBuZXcgVGV4dChsYWJlbCwgc3R5bGUpO1xuICAgICAgICB0aGlzLl9sYWJlbEZpZWxkLnB1c2goZmllbGQpO1xuICAgICAgICBmaWVsZC54ID0geDtcbiAgICAgICAgZmllbGQueSA9IHk7XG4gICAgICAgIGZpZWxkLmNhY2hlQXNCaXRtYXAgPSB0cnVlO1xuICAgICAgICBmaWVsZC5pbnRlcmFjdGl2ZSA9IGZpZWxkLmludGVyYWN0aXZlQ2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChmaWVsZCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYWJlbEZpZWxkLmluZGV4T2YoZmllbGQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7Pjg6njg5njg6vjgavooajnpLrjgZXjgozjgabjgYTjgovmlofoqIDjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldExhYmVsKGluZGV4KSB7XG4gICAgICAgIGlmICghdGhpcy5fbGFiZWxGaWVsZClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWxGaWVsZFtpbmRleF0udGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oc44K/44Oz44Op44OZ44Or44Gu5paH6KiA44KS5pu05paw44GZ44KL44CCXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0TGFiZWwoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9sYWJlbEZpZWxkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQmFzaWNCdXR0b24gOiBcIiArXG4gICAgICAgICAgICAgICAgXCLjg5zjgr/jg7Pjg6njg5njg6vjgYzliJ3mnJ/ljJbjgZXjgozjgabjgYTjgb7jgZvjgpPjgYzjgIHjg6njg5njg6vjga7mlofoqIDjgYzmjIflrprjgZXjgozjgb7jgZfjgZ/jgIJcIiArXG4gICAgICAgICAgICAgICAgXCLmlofoqIDjgpLmjIflrprjgZnjgovliY3jgavjg6njg5njg6vjga7liJ3mnJ/ljJbjgpJhZGRMYWJlbOmWouaVsOOBp+ihjOOBo+OBpuOBj+OBoOOBleOBhOOAglwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbGFiZWxGaWVsZFtpbmRleF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQmFzaWNCdXR0b24gOiBcIiArIGDmjIflrprjgZXjgozjgZ9pbmRleCA6ICR7aW5kZXh944Gr44Op44OZ44Or44GM5a2Y5Zyo44GX44G+44Gb44KT44CCYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLl9sYWJlbEZpZWxkW2luZGV4XTtcbiAgICAgICAgaWYgKGZpZWxkLnRleHQgPT09IHZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmaWVsZC50ZXh0ID0gdmFsdWU7XG4gICAgfVxuICAgIGdldExhYmVsRmllbGQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsRmllbGRbaW5kZXhdO1xuICAgIH1cbiAgICBnZXQgYnV0dG9uVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b25WYWx1ZTtcbiAgICB9XG4gICAgc2V0IGJ1dHRvblZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9idXR0b25WYWx1ZSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAcGl4aS91dGlsc1wiO1xuZXhwb3J0IGNsYXNzIFNlbGVjdGlvblN0YXRlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihpc1NlbGVjdGVkID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTZWxlY3RlZCA9IGlzU2VsZWN0ZWQ7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEJhc2ljQnV0dG9uQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1dHRvblZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuYnV0dG9uVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTZWxlY3Rpb25TdGF0ZSB9IGZyb20gXCIuL1NlbGVjdGlvblN0YXRlXCI7XG5pbXBvcnQgeyBCYXNpY0J1dHRvbkNvbnRleHQgfSBmcm9tIFwiLi9CYXNpY0J1dHRvbkNvbnRleHRcIjtcbmltcG9ydCB7IEJhc2ljQ2xpY2tCdXR0b24gfSBmcm9tIFwiLi9CYXNpY0NsaWNrQnV0dG9uXCI7XG4vKipcbiAqIOmBuOaKnueKtuaFi+OCkuaMgeOBpOODnOOCv+ODs+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQmFzaWNDaGVja0J1dHRvbiBleHRlbmRzIEJhc2ljQ2xpY2tCdXR0b24ge1xuICAgIGdldCBzZWxlY3Rpb25TdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvblN0YXRlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtYXRlcmlhbHMpIHtcbiAgICAgICAgc3VwZXIobWF0ZXJpYWxzKTtcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uU3RhdGUgPSBuZXcgU2VsZWN0aW9uU3RhdGUoKTtcbiAgICB9XG4gICAgcHJlc3NCdXR0b24oZXZ0KSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVNYXRlcmlhbFZpc2libGUodGhpcy5fc2VsZWN0aW9uU3RhdGUuaXNTZWxlY3RlZCA/IFwic2VsZWN0X2Rvd25cIiA6IFwibm9ybWFsX2Rvd25cIik7XG4gICAgfVxuICAgIHJlbGVhc2VCdXR0b24oZXZ0KSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5pc1ByZXNzZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25TdGF0ZS5pc1NlbGVjdGVkKVxuICAgICAgICAgICAgdGhpcy5kZXNlbGVjdEJ1dHRvbihldnQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLnNlbGVjdEJ1dHRvbihldnQpO1xuICAgIH1cbiAgICBvdmVyQnV0dG9uKGV2dCkge1xuICAgICAgICBzdXBlci5vdmVyQnV0dG9uKGV2dCk7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxWaXNpYmxlKHRoaXMuX3NlbGVjdGlvblN0YXRlLmlzU2VsZWN0ZWQgPyBcInNlbGVjdF9vdmVyXCIgOiBcIm5vcm1hbF9vdmVyXCIpO1xuICAgIH1cbiAgICBvdXRCdXR0b24oZXZ0KSB7XG4gICAgICAgIHN1cGVyLm91dEJ1dHRvbihldnQpO1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsVmlzaWJsZSh0aGlzLl9zZWxlY3Rpb25TdGF0ZS5pc1NlbGVjdGVkID8gXCJzZWxlY3RcIiA6IFwibm9ybWFsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5jaGVja0FjdGl2aXR5KCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODnOOCv+ODs+OCkumBuOaKnuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBldnRcbiAgICAgKi9cbiAgICBzZWxlY3RCdXR0b24oZXZ0KSB7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25TdGF0ZS5pc1NlbGVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb25TdGF0ZS5pc1NlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYXRlcmlhbFZpc2libGUodGhpcy5pc092ZXIgPyBcInNlbGVjdF9vdmVyXCIgOiBcInNlbGVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidXR0b25FdnQgPSBuZXcgQmFzaWNCdXR0b25Db250ZXh0KHRoaXMsIHRoaXMuYnV0dG9uVmFsdWUpO1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb25TdGF0ZS5lbWl0KFwic2VsZWN0ZWRcIiwgYnV0dG9uRXZ0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oc44K/44Oz44Gu6YG45oqe44KS6Kej6Zmk44GZ44KL44CCXG4gICAgICogQHBhcmFtIGV2dFxuICAgICAqL1xuICAgIGRlc2VsZWN0QnV0dG9uKGV2dCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NlbGVjdGlvblN0YXRlLmlzU2VsZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxWaXNpYmxlKHRoaXMuaXNPdmVyID8gXCJub3JtYWxfb3ZlclwiIDogXCJub3JtYWxcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uU3RhdGUuaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBidXR0b25FdnQgPSBuZXcgQmFzaWNCdXR0b25Db250ZXh0KHRoaXMsIHRoaXMuYnV0dG9uVmFsdWUpO1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb25TdGF0ZS5lbWl0KFwidW5zZWxlY3RlZFwiLCBidXR0b25FdnQpO1xuICAgIH1cbiAgICBlbmFibGVCdXR0b24oKSB7XG4gICAgICAgIHN1cGVyLmVuYWJsZUJ1dHRvbigpO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hdGVyaWFsVmlzaWJsZSh0aGlzLl9zZWxlY3Rpb25TdGF0ZS5pc1NlbGVjdGVkID8gXCJzZWxlY3RcIiA6IFwibm9ybWFsXCIpO1xuICAgIH1cbiAgICBnZXRCdXR0b25TdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNhYmxlKVxuICAgICAgICAgICAgcmV0dXJuIFwiZGlzYWJsZVwiO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25TdGF0ZT8uaXNTZWxlY3RlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzZWxlY3RcIjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJub3JtYWxcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDpgbjmip7nirbmhYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgc2VsZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25TdGF0ZS5pc1NlbGVjdGVkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2ljQnV0dG9uQ29udGV4dCB9IGZyb20gXCIuL0Jhc2ljQnV0dG9uQ29udGV4dFwiO1xuaW1wb3J0IHsgQmFzaWNDaGVja0J1dHRvbiB9IGZyb20gXCIuL0Jhc2ljQ2hlY2tCdXR0b25cIjtcbi8qKlxuICog5o6S5LuW55qE44Gr6YG45oqe5Y+v6IO944Gq44Oc44K/44Oz44CC44Op44K444Kq44Oc44K/44Oz44Gu44K744OD44OI44GvQmFzaWNSYWRpb0J1dHRvbk1hbmFnZXLjgafoqK3lrprjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2ljUmFkaW9CdXR0b24gZXh0ZW5kcyBCYXNpY0NoZWNrQnV0dG9uIHtcbiAgICBjb25zdHJ1Y3RvcihtYXRlcmlhbHMpIHtcbiAgICAgICAgc3VwZXIobWF0ZXJpYWxzKTtcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uU3RhdGUub24oXCJzZWxlY3RlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvciA9IFwiYXV0b1wiO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uU3RhdGUub24oXCJ1bnNlbGVjdGVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg5zjgr/jg7PjgpLpgbjmip7jgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gZXZ0XG4gICAgICovXG4gICAgc2VsZWN0QnV0dG9uKGV2dCkge1xuICAgICAgICBpZiAodGhpcy5fc2VsZWN0aW9uU3RhdGUuaXNTZWxlY3RlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uU3RhdGUuaXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGUpIHtcbiAgICAgICAgICAgIC8v44Op44K444Kq44Oc44K/44Oz44Gv6YG45oqe44GX44Gf5pmC54K544Gn5pON5L2c5LiN5Y+v44Go44Gq44KL44CC44Gd44Gu44Gf44KBU0VMRUNUX09WRVLjgavjga/pgbfnp7vjgZfjgarjgYTjgIJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxWaXNpYmxlKFwic2VsZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1dHRvbkV2dCA9IG5ldyBCYXNpY0J1dHRvbkNvbnRleHQodGhpcywgdGhpcy5idXR0b25WYWx1ZSk7XG4gICAgICAgIHRoaXMuX3NlbGVjdGlvblN0YXRlLmVtaXQoXCJzZWxlY3RlZFwiLCBidXR0b25FdnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDnj77lnKjjga7jg5zjgr/jg7Pjga7mnInlirnjgIHnhKHlirnnirbmhYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiDjg6njgrjjgqrjg5zjgr/jg7Pjga/pgbjmip7kuK3jgoLmk43kvZzjgYznhKHlirnjgajjgarjgovjgIJcbiAgICAgKiBAcmV0dXJuICAgIOODnOOCv+ODs+OBjOacieWKueOBi+WQpuOBi1xuICAgICAqL1xuICAgIGNoZWNrQWN0aXZpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3Rpb25TdGF0ZS5pc1NlbGVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gc3VwZXIuY2hlY2tBY3Rpdml0eSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2ljQnV0dG9uQ29udGV4dCB9IGZyb20gXCIuL0Jhc2ljQnV0dG9uQ29udGV4dFwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBwaXhpL3V0aWxzXCI7XG4vKipcbiAqIOaOkuS7lueahOOBq+mBuOaKnuOBleOCjOOCi+ODnOOCv+ODs+OCkuWItuW+oeOBmeOCi+OCr+ODqeOCueOBp+OBmeOAglxuICpcbiAqIOODoeODs+ODkOODvOOBrkJhc2ljUmFkaW9CdXR0b27jgYzlpInmm7TjgZXjgozjgovjgajjgIHjgZPjga7jgq/jg6njgrnjgavlpInmm7TlhoXlrrnjgYzpgJrnn6XjgZXjgozjgb7jgZnjgIJcbiAqIOOBk+OBruOCr+ODqeOCueOBr+WkieabtOmAmuefpeOBq+W/nOOBmOOAgeS7luOBrkJhc2ljUmFkaW9CdXR0b27jgqrjg5bjgrjjgqfjgq/jg4jjga7pgbjmip7nirbmhYvjgpLlpInmm7TjgZfjgb7jgZnjgIJcbiAqIOOBvuOBn+OAgeOBk+OBruOCr+ODqeOCueOBr+WkieabtOWGheWuueOCkkV2ZW5044Go44GX44Gm55m65L+h44GX44G+44GZ44CCXG4gKlxuICog5Yip55So44GZ44KL6Zqb44Gr44Gv5Lul5LiL44Gu44KI44GG44Gq5omL6aCG44Gn44Kk44Oz44K544K/44Oz44K55YyW44GX44Gm44GP44Gg44GV44GE44CCXG4gKlxuICogbGV0IGJ0bjpCYXNpY1JhZGlvQnV0dG9uID0gbmV3IEJhc2ljUmFkaW9CdXR0b24oLi4uKTtcbiAqIGxldCBtYW5hZ2VyOkJhc2ljUmFkaW9CdXR0b25NYW5hZ2VyID0gbmV3IEJhc2ljUmFkaW9CdXR0b25NYW5hZ2VyKCk7IC8v44Kk44Oz44K544K/44Oz44K55YyWXG4gKiBtYW5hZ2VyLmFkZEJ1dHRvbihidG4pO1xuICogbWFuYWdlci5zZWxlY3RlZCA9IGJ0bjsgLy/jg4fjg5Xjgqnjg6vjg4jjgafpgbjmip7jgZXjgozjgabjgYTjgovjg5zjgr/jg7PjgpLmjIflrppcbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2ljUmFkaW9CdXR0b25NYW5hZ2VyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fYnV0dG9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODqeOCuOOCquODnOOCv+ODs+OBruOCsOODq+ODvOODl+OBq+ODnOOCv+ODs+OCkui/veWKoOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSB7QmFzaWNSYWRpb0J1dHRvbn0gYnV0dG9uXG4gICAgICovXG4gICAgYWRkKGJ1dHRvbikge1xuICAgICAgICB0aGlzLl9idXR0b25zLnB1c2goYnV0dG9uKTtcbiAgICAgICAgYnV0dG9uLnNlbGVjdGlvblN0YXRlLm9uKFwic2VsZWN0ZWRcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IGU7XG4gICAgICAgICAgICB0aGlzLmRlc2VsZWN0T3RoZXJzKGN0eC50YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oc44K/44Oz44KS6YG45oqe44GZ44KL44CCXG4gICAgICogbnVsbOOCkuW8leaVsOOBq+WPluOCi+OBqOWFqOOBpuOBrumBuOaKnuOCkuino+mZpOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSB7QmFzaWNSYWRpb0J1dHRvbn0gc2VsZWN0ZWRCdXR0b25cbiAgICAgKi9cbiAgICBzZXQgc2VsZWN0ZWQoc2VsZWN0ZWRCdXR0b24pIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSBzZWxlY3RlZEJ1dHRvbjtcbiAgICAgICAgaWYgKHNlbGVjdGVkQnV0dG9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RBbGxCdXR0b25zKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy/pgbjmip7jgZXjgozjgZ/jg5zjgr/jg7PjgYzjgZPjga7jgqTjg7Pjgrnjgr/jg7Pjgrnjga7nrqHnkIbkuIvjgYvnorroqo3jgZnjgovjgIJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9idXR0b25zLmluZGV4T2Yoc2VsZWN0ZWRCdXR0b24pO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJCYXNpY1JhZGlvQnV0dG9uTWFuYWdlciA6IFwiICtcbiAgICAgICAgICAgICAgICBcIumBuOaKnuWvvuixoeOBqOOBl+OBpuaMh+WumuOBleOCjOOBn+ODnOOCv+ODs+OBjOOAgUJhc2ljUmFkaW9CdXR0b25NYW5hZ2Vy44Gu566h55CG5LiL44Gr44GC44KK44G+44Gb44KT44CCXCIgK1xuICAgICAgICAgICAgICAgIFwi5oyH5a6a44KS6KGM44GG5YmN44GrYWRkQnV0dG9u6Zai5pWw44Gn44Oc44K/44Oz44KSQmFzaWNSYWRpb0J1dHRvbk1hbmFnZXLjgavnmbvpjLLjgZfjgabjgY/jgaDjgZXjgYTjgIJcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0ZWRCdXR0b24uc2VsZWN0QnV0dG9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOmBuOaKnua4iOOBv+OBruODnOOCv+ODs+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIOmBuOaKnuOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBr251bGzjgpLov5TjgZnjgIJcbiAgICAgKiBAcmV0dXJucyB7QmFzaWNSYWRpb0J1dHRvbiB8IG51bGx9XG4gICAgICovXG4gICAgZ2V0IHNlbGVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaMh+WumuOBleOCjOOBn+ODnOOCv+ODs+S7peWkluOBrumBuOaKnuOCkuino+mZpOOBl+OAgUJhc2ljUmFkaW9CdXR0b25NYW5hZ2Vy44GL44KJU0VMRUNURUTjgqTjg5njg7Pjg4jjgpLnmbrooYzjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0ge0Jhc2ljUmFkaW9CdXR0b259IHNlbGVjdGVkQnV0dG9uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc0Rpc3BhdGNoU2VsZWN0RXZlbnRcbiAgICAgKi9cbiAgICBkZXNlbGVjdE90aGVycyhzZWxlY3RlZEJ1dHRvbiwgaXNEaXNwYXRjaFNlbGVjdEV2ZW50ID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHNlbGVjdGVkQnV0dG9uO1xuICAgICAgICBmb3IgKGxldCBidG4gb2YgdGhpcy5fYnV0dG9ucykge1xuICAgICAgICAgICAgaWYgKGJ0biAhPSBzZWxlY3RlZEJ1dHRvbikge1xuICAgICAgICAgICAgICAgIGJ0bi5kZXNlbGVjdEJ1dHRvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Rpc3BhdGNoU2VsZWN0RXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2dCA9IG5ldyBCYXNpY0J1dHRvbkNvbnRleHQodGhpcy5fc2VsZWN0ZWQsIHRoaXMuX3NlbGVjdGVkLmJ1dHRvblZhbHVlKTtcbiAgICAgICAgICAgIGV2dC5pbmRleCA9IHRoaXMuX2J1dHRvbnMuaW5kZXhPZih0aGlzLl9zZWxlY3RlZCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJzZWxlY3RlZFwiLCBldnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOeuoeeQhuS4i+OBruWFqOOBpuOBruODnOOCv+ODs+OBrumBuOaKnuOCkuino+mZpOOBmeOCi+OAglxuICAgICAqL1xuICAgIGRlc2VsZWN0QWxsQnV0dG9ucygpIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWQgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBidG4gb2YgdGhpcy5fYnV0dG9ucykge1xuICAgICAgICAgICAgYnRuLmRlc2VsZWN0QnV0dG9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IEJhc2ljQnV0dG9uQ29udGV4dChudWxsLCBudWxsKTtcbiAgICAgICAgdGhpcy5lbWl0KFwidW5zZWxlY3RlZFwiLCBldnQpO1xuICAgIH1cbiAgICBkaXNhYmxlQWxsKCkge1xuICAgICAgICBmb3IgKGxldCBidG4gb2YgdGhpcy5fYnV0dG9ucykge1xuICAgICAgICAgICAgYnRuLmRpc2FibGVCdXR0b24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNhYmxlTW91c2VBbGwoKSB7XG4gICAgICAgIGZvciAobGV0IGJ0biBvZiB0aGlzLl9idXR0b25zKSB7XG4gICAgICAgICAgICBidG4uaW50ZXJhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbmFibGVBbGwoKSB7XG4gICAgICAgIGZvciAobGV0IGJ0biBvZiB0aGlzLl9idXR0b25zKSB7XG4gICAgICAgICAgICBidG4uZW5hYmxlQnV0dG9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5hYmxlTW91c2VBbGwoKSB7XG4gICAgICAgIGZvciAobGV0IGJ0biBvZiB0aGlzLl9idXR0b25zKSB7XG4gICAgICAgICAgICBidG4uaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvuWcqOmBuOaKnuOBleOCjOOBpuOBhOOCi+ODnOOCv+ODs+OBrmJ1dHRvblZhbHVl44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICog6YG45oqe44GV44KM44Gf44Oc44K/44Oz44GM44Gq44GE5aC05ZCI44GvbnVsbOOCkui/lOOBmeOAglxuICAgICAqIEByZXR1cm5zIHthbnl9XG4gICAgICovXG4gICAgZ2V0IHNlbGVjdGVkQnV0dG9uVmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IGJ0biA9IHRoaXMuc2VsZWN0ZWQ7XG4gICAgICAgIGlmIChidG4pIHtcbiAgICAgICAgICAgIHJldHVybiBidG4uYnV0dG9uVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOBk+OBruOCpOODs+OCueOCv+ODs+OCueOBp+euoeeQhuOCkuOBl+OBpuOBhOOCi+ODqeOCuOOCquODnOOCv+ODs+OBrumFjeWIl+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIEByZXR1cm5zIHtCYXNpY1JhZGlvQnV0dG9uW119XG4gICAgICovXG4gICAgZ2V0IGJ1dHRvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBidXR0b25WYWx1ZeOCkuaknOe0ouOCreODvOOBqOOBl+OBpuOAgeipsuW9k+OBmeOCi+ODnOOCv+ODs+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIOipsuW9k+OBmeOCi+ODnOOCv+ODs+OBjOOBquOBhOWgtOWQiOOBr251bGzjgpLov5TjgZnjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCYXNpY1JhZGlvQnV0dG9uIHwgbnVsbH1cbiAgICAgKi9cbiAgICBnZXRCdXR0b24odmFsdWUpIHtcbiAgICAgICAgZm9yIChsZXQgYnRuIG9mIHRoaXMuX2J1dHRvbnMpIHtcbiAgICAgICAgICAgIGlmIChidG4uYnV0dG9uVmFsdWUgPT09IHZhbHVlICYmIGJ0bi5idXR0b25WYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ0bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9CYXNpY0NsaWNrQnV0dG9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CYXNpY0J1dHRvbkNvbnRleHRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Jhc2ljQnV0dG9uU3RhdGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0J1dHRvbk1hdGVyaWFsU2V0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CYXNpY0NoZWNrQnV0dG9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CYXNpY1JhZGlvQnV0dG9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CYXNpY1JhZGlvQnV0dG9uTWFuYWdlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2VsZWN0aW9uU3RhdGVcIjtcbiIsImltcG9ydCB7XG4gIEJhc2ljUmFkaW9CdXR0b24sXG4gIEJhc2ljQ2xpY2tCdXR0b24sXG4gIEJhc2ljQ2hlY2tCdXR0b24sXG4gIEJhc2ljUmFkaW9CdXR0b25NYW5hZ2VyLFxufSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IEFwcGxpY2F0aW9uLCBHcmFwaGljcyB9IGZyb20gXCJwaXhpLmpzXCI7XG5cbi8qKlxuICogRE9NQ29udGVudExvYWRlZOW+jOOBruWIneacn+WMluWHpueQhuOAglxuICog44OH44Oi44Gr5b+F6KaB44Gq44OR44O844OE44KS5LiA5byP5Yid5pyf5YyW44GZ44KL44CCXG4gKi9cbmNvbnN0IG9uRG9tQ29udGVudHNMb2FkZWQgPSAoKSA9PiB7XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHBsaWNhdGlvbih7IHdpZHRoOiA4MDAsIGhlaWdodDogNjAwIH0pO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFwcC52aWV3KTtcblxuICBpbml0QnV0dG9uKGFwcC5zdGFnZSk7XG4gIGluaXRDaGVja0J1dHRvbihhcHAuc3RhZ2UpO1xuICBpbml0UmFkaW9CdXR0b24oYXBwLnN0YWdlKTtcbiAgaW5pdFJhZGlvTWFya2VyQnV0dG9uKGFwcC5zdGFnZSk7XG59O1xuXG5jb25zdCBpbml0QnV0dG9uID0gKHN0YWdlKSA9PiB7XG4gIGNvbnN0IGJ1dHRvbiA9IG5ldyBCYXNpY0NsaWNrQnV0dG9uKGdldE1hdGVyaWFsU2V0KCkpO1xuICBidXR0b24ueCA9IGJ1dHRvbi55ID0gMzY7XG4gIGNvbnN0IGluZGV4ID0gYWRkTGFiZWwoYnV0dG9uKTtcbiAgYnV0dG9uLnNldExhYmVsKGluZGV4LCBcIkFiY+OBglwiKTtcbiAgc3RhZ2UuYWRkQ2hpbGQoYnV0dG9uKTtcbn07XG5cbmNvbnN0IGluaXRDaGVja0J1dHRvbiA9IChzdGFnZSkgPT4ge1xuICBjb25zdCBidXR0b25TZWxlY3QgPSBuZXcgQmFzaWNDaGVja0J1dHRvbihnZXRNYXRlcmlhbFNldCgpKTtcbiAgYnV0dG9uU2VsZWN0LnkgPSAzNjtcbiAgYnV0dG9uU2VsZWN0LnggPSAzNiArIDEyOCArIDM2O1xuICBhZGRMYWJlbChidXR0b25TZWxlY3QpO1xuICBidXR0b25TZWxlY3QuYnV0dG9uVmFsdWUgPSBcIl9fYnV0dG9uX192YWxfX3Rlc3RcIjtcblxuICBzdGFnZS5hZGRDaGlsZChidXR0b25TZWxlY3QpO1xuXG4gIGJ1dHRvblNlbGVjdC5vbihcInNlbGVjdGVkXCIsIChlKSA9PiB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH0pO1xufTtcblxuY29uc3QgaW5pdFJhZGlvQnV0dG9uID0gKHN0YWdlKSA9PiB7XG4gIGNvbnN0IG1hbmFnZXIgPSBuZXcgQmFzaWNSYWRpb0J1dHRvbk1hbmFnZXIoKTtcblxuICBjb25zdCBuID0gNDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBjb25zdCBidXR0b25SYWRpbyA9IG5ldyBCYXNpY1JhZGlvQnV0dG9uKGdldE1hdGVyaWFsU2V0KCkpO1xuICAgIGJ1dHRvblJhZGlvLnkgPSAxMjg7XG4gICAgYnV0dG9uUmFkaW8ueCA9IDM2ICsgKDEyOCArIDM2KSAqIGk7XG4gICAgYWRkTGFiZWwoYnV0dG9uUmFkaW8pO1xuICAgIGJ1dHRvblJhZGlvLmJ1dHRvblZhbHVlID0gXCJfX2J1dHRvbl9fdmFsX190ZXN0X19cIiArIGk7XG4gICAgc3RhZ2UuYWRkQ2hpbGQoYnV0dG9uUmFkaW8pO1xuICAgIG1hbmFnZXIuYWRkKGJ1dHRvblJhZGlvKTtcbiAgfVxuXG4gIG1hbmFnZXIuc2VsZWN0ZWQgPSBtYW5hZ2VyLmJ1dHRvbnNbMF07XG4gIG1hbmFnZXIub24oXCJzZWxlY3RlZFwiLCAoZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICB9KTtcbn07XG5cbmNvbnN0IGluaXRSYWRpb01hcmtlckJ1dHRvbiA9IChzdGFnZSkgPT4ge1xuICBjb25zdCBtYW5hZ2VyID0gbmV3IEJhc2ljUmFkaW9CdXR0b25NYW5hZ2VyKCk7XG5cbiAgY29uc3QgbiA9IDQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgY29uc3QgYnV0dG9uUmFkaW8gPSBuZXcgQmFzaWNSYWRpb0J1dHRvbihnZXRNYXRlcmlhbFNldCh0cnVlKSk7XG4gICAgYnV0dG9uUmFkaW8ueSA9IDE5NjtcbiAgICBidXR0b25SYWRpby54ID0gMzYgKyAoMTI4ICsgMzYpICogaTtcbiAgICBhZGRMYWJlbChidXR0b25SYWRpbyk7XG4gICAgYnV0dG9uUmFkaW8uYnV0dG9uVmFsdWUgPSBcIl9fYnV0dG9uX192YWxfX3Rlc3RfX1wiICsgaTtcbiAgICBzdGFnZS5hZGRDaGlsZChidXR0b25SYWRpbyk7XG4gICAgbWFuYWdlci5hZGQoYnV0dG9uUmFkaW8pO1xuICB9XG5cbiAgbWFuYWdlci5zZWxlY3RlZCA9IG1hbmFnZXIuYnV0dG9uc1swXTtcbiAgbWFuYWdlci5vbihcInNlbGVjdGVkXCIsIChlKSA9PiB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH0pO1xufTtcblxuY29uc3QgZ2V0TWF0ZXJpYWxTZXQgPSAoaGFzTWFya2VyID0gZmFsc2UpID0+IHtcbiAgY29uc3QgbWF0ID0ge1xuICAgIG5vcm1hbDogZ2V0UmVjdCgweGZmMDBmZiksXG4gICAgb3ZlcjogZ2V0UmVjdCgweGZmNjZmZiksXG4gICAgZG93bjogZ2V0UmVjdCgweGZmZmZmZiksXG4gICAgc2VsZWN0Tm9ybWFsOiBnZXRSZWN0KDB4MzMwMDMzKSxcbiAgICBzZWxlY3RPdmVyOiBnZXRSZWN0KDB4NDQyMjQ0KSxcbiAgICBzZWxlY3REb3duOiBnZXRSZWN0KDB4MzMzMzMzKSxcbiAgfTtcbiAgaWYgKGhhc01hcmtlcikge1xuICAgIGNvbnNvbGUubG9nKGhhc01hcmtlcik7XG4gICAgbWF0LnNlbGVjdE1hcmtlciA9IGdldE1hcmtlcigpO1xuICB9XG4gIHJldHVybiBtYXQ7XG59O1xuXG5jb25zdCBnZXRSZWN0ID0gKGNvbG9yKSA9PiB7XG4gIGNvbnN0IGdyYSA9IG5ldyBHcmFwaGljcygpO1xuICBncmEuYmVnaW5GaWxsKGNvbG9yKS5kcmF3UmVjdCgwLCAwLCAxMjgsIDMyKS5lbmRGaWxsKCk7XG4gIHJldHVybiBncmE7XG59O1xuXG5jb25zdCBhZGRMYWJlbCA9IChidG4pID0+IHtcbiAgcmV0dXJuIGJ0bi5hZGRMYWJlbChcbiAgICAwLFxuICAgIDAsXG4gICAgXCJBYmNkZWZnaGlqa2zjgYJcIixcbiAgICB7IGZvbnRTaXplOiAxNiB9LFxuICAgIHtcbiAgICAgIG5vcm1hbDogMHhmZmZmZmYsXG4gICAgICBvdmVyOiAweGZmMDBmZixcbiAgICAgIGRvd246IDB4MDAwMDAwLFxuICAgICAgc2VsZWN0Tm9ybWFsOiAweGZmZmYzMyxcbiAgICAgIHNlbGVjdE92ZXI6IDB4MDBmZjAwLFxuICAgICAgc2VsZWN0RG93bjogMHg5OTk5OTksXG4gICAgfVxuICApO1xufTtcblxuY29uc3QgZ2V0TWFya2VyID0gKCkgPT4ge1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKDB4ZmYwMDAwKS5kcmF3Q2lyY2xlKDAsIDAsIDgpLmVuZEZpbGwoKTtcbiAgcmV0dXJuIGc7XG59O1xuXG4vKipcbiAqIERPTUNvbnRlbnRMb2FkZWTku6XpmY3jgavliJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAqL1xuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gIG9uRG9tQ29udGVudHNMb2FkZWQoKTtcbn0gZWxzZSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIG9uRG9tQ29udGVudHNMb2FkZWQpO1xufVxuIl0sIm5hbWVzIjpbIkJ1dHRvbk9wdGlvblNldCIsImdldE1hdGVyaWFsIiwic2V0Iiwic3RhdGUiLCJkaXNhYmxlIiwibm9ybWFsIiwib3ZlciIsImRvd24iLCJzZWxlY3ROb3JtYWwiLCJzZWxlY3RPdmVyIiwic2VsZWN0RG93biIsIkJ1dHRvbk1hdGVyaWFsU2V0IiwiYWRkQ2hpbGQiLCJidXR0b24iLCJtYXRlcmlhbCIsInJlbW92ZSIsIm1hdGVyaWFscyIsImdldE1hdGVyaWFsQXJyYXkiLCJtYXQiLCJwYXJlbnQiLCJyZW1vdmVDaGlsZCIsInNlbGVjdE1hcmtlciIsInVwZGF0ZVZpc2libGUiLCJpbnZpc2libGVBbGwiLCJ2aXNpYmxlIiwiQnV0dG9uTGFiZWxDb2xvclNldCIsInVwZGF0ZSIsImZpZWxkIiwiY29sb3JzIiwic3R5bGUiLCJmaWxsIiwiY2FjaGVBc0JpdG1hcCIsIkNvbnRhaW5lciIsIlRleHQiLCJCYXNpY0NsaWNrQnV0dG9uIiwiY29uc3RydWN0b3IiLCJpc0Rpc2FibGUiLCJpc1ByZXNzZWQiLCJpc092ZXIiLCJfZnJvemVuIiwiX2J1dHRvblZhbHVlIiwiX2xhYmVsRmllbGQiLCJsYWJlbENvbG9ycyIsImludGVyYWN0aXZlIiwiY3Vyc29yIiwic2V0TW91c2VFdmVudHMiLCJpbml0TWF0ZXJpYWwiLCJvbiIsImUiLCJwcmVzc0J1dHRvbiIsInJlbGVhc2VCdXR0b24iLCJvdmVyQnV0dG9uIiwib3V0QnV0dG9uIiwidXBkYXRlTWF0ZXJpYWxWaXNpYmxlIiwiZ2V0QnV0dG9uU3RhdGUiLCJmb3JFYWNoIiwibGFiZWwiLCJpbmRleCIsImV2dCIsImNoZWNrQWN0aXZpdHkiLCJkaXNhYmxlQnV0dG9uIiwidXBkYXRlTW91c2VFbmFibGVkIiwiZW5hYmxlQnV0dG9uIiwiZnJvemVuIiwidmFsdWUiLCJhZGRMYWJlbCIsIngiLCJ5IiwiY29sb3IiLCJwdXNoIiwidGV4dEJhc2VsaW5lIiwiaW50ZXJhY3RpdmVDaGlsZHJlbiIsImluZGV4T2YiLCJnZXRMYWJlbCIsInRleHQiLCJzZXRMYWJlbCIsImxlbmd0aCIsImNvbnNvbGUiLCJ3YXJuIiwidW5kZWZpbmVkIiwiZ2V0TGFiZWxGaWVsZCIsImJ1dHRvblZhbHVlIiwiRXZlbnRFbWl0dGVyIiwiU2VsZWN0aW9uU3RhdGUiLCJpc1NlbGVjdGVkIiwiQmFzaWNCdXR0b25Db250ZXh0IiwidGFyZ2V0IiwiQmFzaWNDaGVja0J1dHRvbiIsInNlbGVjdGlvblN0YXRlIiwiX3NlbGVjdGlvblN0YXRlIiwiZGVzZWxlY3RCdXR0b24iLCJzZWxlY3RCdXR0b24iLCJidXR0b25FdnQiLCJlbWl0Iiwic2VsZWN0aW9uIiwiQmFzaWNSYWRpb0J1dHRvbiIsIkJhc2ljUmFkaW9CdXR0b25NYW5hZ2VyIiwiYXJndW1lbnRzIiwiX2J1dHRvbnMiLCJfc2VsZWN0ZWQiLCJhZGQiLCJjdHgiLCJkZXNlbGVjdE90aGVycyIsInNlbGVjdGVkIiwic2VsZWN0ZWRCdXR0b24iLCJkZXNlbGVjdEFsbEJ1dHRvbnMiLCJpc0Rpc3BhdGNoU2VsZWN0RXZlbnQiLCJidG4iLCJkaXNhYmxlQWxsIiwiZGlzYWJsZU1vdXNlQWxsIiwiZW5hYmxlQWxsIiwiZW5hYmxlTW91c2VBbGwiLCJzZWxlY3RlZEJ1dHRvblZhbHVlIiwiYnV0dG9ucyIsImdldEJ1dHRvbiIsIkFwcGxpY2F0aW9uIiwiR3JhcGhpY3MiLCJvbkRvbUNvbnRlbnRzTG9hZGVkIiwiYXBwIiwid2lkdGgiLCJoZWlnaHQiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInZpZXciLCJpbml0QnV0dG9uIiwic3RhZ2UiLCJpbml0Q2hlY2tCdXR0b24iLCJpbml0UmFkaW9CdXR0b24iLCJpbml0UmFkaW9NYXJrZXJCdXR0b24iLCJnZXRNYXRlcmlhbFNldCIsImJ1dHRvblNlbGVjdCIsImxvZyIsIm1hbmFnZXIiLCJuIiwiaSIsImJ1dHRvblJhZGlvIiwiaGFzTWFya2VyIiwiZ2V0UmVjdCIsImdldE1hcmtlciIsImdyYSIsImJlZ2luRmlsbCIsImRyYXdSZWN0IiwiZW5kRmlsbCIsImZvbnRTaXplIiwiZyIsImRyYXdDaXJjbGUiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///753\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,F,U)=>{if(!B){var g=1/0;for(s=0;s<deferred.length;s++){for(var[B,F,U]=deferred[s],I=!0,C=0;C<B.length;C++)(!1&U||g>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[C])))?B.splice(C--,1):(I=!1,U<g&&(g=U));if(I){deferred.splice(s--,1);var t=F();void 0!==t&&(Q=t)}}return Q}U=U||0;for(var s=deferred.length;s>0&&deferred[s-1][2]>U;s--)deferred[s]=deferred[s-1];deferred[s]=[B,F,U]},__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),(()=>{var Q={577:0};__webpack_require__.O.j=B=>0===Q[B];var B=(B,F)=>{var U,g,[I,C,t]=F,s=0;if(I.some((B=>0!==Q[B]))){for(U in C)__webpack_require__.o(C,U)&&(__webpack_require__.m[U]=C[U]);if(t)var l=t(__webpack_require__)}for(B&&B(F);s<I.length;s++)g=I[s],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_pixijs_basic_button=self.webpackChunk_masatomakino_pixijs_basic_button||[];F.forEach(B.bind(null,0)),F.push=B.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(753)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();